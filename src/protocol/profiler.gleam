//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Profiler Domain  
////
//// This protocol domain has no description.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Profiler/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import gleam/json
import gleam/option
import protocol/debugger
import protocol/runtime

/// Profile node. Holds callsite information, execution statistics and child nodes.
pub type ProfileNode {
  ProfileNode(
    id: Int,
    call_frame: runtime.CallFrame,
    hit_count: option.Option(Int),
    children: option.Option(List(Int)),
    deopt_reason: option.Option(String),
    position_ticks: option.Option(List(PositionTickInfo)),
  )
}

@internal
pub fn encode__profile_node(value__: ProfileNode) {
  json.object([
    #("id", json.int(value__.id)),
    #("callFrame", runtime.encode__call_frame(value__.call_frame)),
    #("hitCount", {
      case value__.hit_count {
        option.Some(value__) -> json.int(value__)
        option.None -> json.null()
      }
    }),
    #("children", {
      case value__.children {
        option.Some(value__) -> json.array(value__, of: json.int)
        option.None -> json.null()
      }
    }),
    #("deoptReason", {
      case value__.deopt_reason {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("positionTicks", {
      case value__.position_ticks {
        option.Some(value__) ->
          json.array(value__, of: encode__position_tick_info)
        option.None -> json.null()
      }
    }),
  ])
}

// TODO implement decoder for Object with props
/// Profile.
pub type Profile {
  Profile(
    nodes: List(ProfileNode),
    start_time: Float,
    end_time: Float,
    samples: option.Option(List(Int)),
    time_deltas: option.Option(List(Int)),
  )
}

@internal
pub fn encode__profile(value__: Profile) {
  json.object([
    #("nodes", json.array(value__.nodes, of: encode__profile_node)),
    #("startTime", json.float(value__.start_time)),
    #("endTime", json.float(value__.end_time)),
    #("samples", {
      case value__.samples {
        option.Some(value__) -> json.array(value__, of: json.int)
        option.None -> json.null()
      }
    }),
    #("timeDeltas", {
      case value__.time_deltas {
        option.Some(value__) -> json.array(value__, of: json.int)
        option.None -> json.null()
      }
    }),
  ])
}

// TODO implement decoder for Object with props
/// Specifies a number of samples attributed to a certain source position.
pub type PositionTickInfo {
  PositionTickInfo(line: Int, ticks: Int)
}

@internal
pub fn encode__position_tick_info(value__: PositionTickInfo) {
  json.object([
    #("line", json.int(value__.line)),
    #("ticks", json.int(value__.ticks)),
  ])
}

// TODO implement decoder for Object with props
/// Coverage data for a source range.
pub type CoverageRange {
  CoverageRange(start_offset: Int, end_offset: Int, count: Int)
}

@internal
pub fn encode__coverage_range(value__: CoverageRange) {
  json.object([
    #("startOffset", json.int(value__.start_offset)),
    #("endOffset", json.int(value__.end_offset)),
    #("count", json.int(value__.count)),
  ])
}

// TODO implement decoder for Object with props
/// Coverage data for a JavaScript function.
pub type FunctionCoverage {
  FunctionCoverage(
    function_name: String,
    ranges: List(CoverageRange),
    is_block_coverage: Bool,
  )
}

@internal
pub fn encode__function_coverage(value__: FunctionCoverage) {
  json.object([
    #("functionName", json.string(value__.function_name)),
    #("ranges", json.array(value__.ranges, of: encode__coverage_range)),
    #("isBlockCoverage", json.bool(value__.is_block_coverage)),
  ])
}

// TODO implement decoder for Object with props
/// Coverage data for a JavaScript script.
pub type ScriptCoverage {
  ScriptCoverage(
    script_id: runtime.ScriptId,
    url: String,
    functions: List(FunctionCoverage),
  )
}

@internal
pub fn encode__script_coverage(value__: ScriptCoverage) {
  json.object([
    #("scriptId", runtime.encode__script_id(value__.script_id)),
    #("url", json.string(value__.url)),
    #("functions", json.array(value__.functions, of: encode__function_coverage)),
  ])
}
// TODO implement decoder for Object with props
