//// > ‚öôÔ∏è  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Profiler Domain  
////
//// This protocol domain has no description.  
////
//// [üìñ   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Profiler/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import gleam/option
import protocol/debugger
import protocol/runtime

/// Profile node. Holds callsite information, execution statistics and child nodes.
pub type ProfileNode {
  ProfileNode(
    id: Int,
    call_frame: runtime.CallFrame,
    hit_count: option.Option(Int),
    children: option.Option(List(Int)),
    deopt_reason: option.Option(String),
    position_ticks: option.Option(List(PositionTickInfo)),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("id", Some("Unique id of the node."), None, None, None, PrimitiveType("integer")), PropertyDefinition("callFrame", Some("Function location."), None, None, None, RefType("Runtime.CallFrame")), PropertyDefinition("hitCount", Some("Number of samples where this node was on top of the call stack."), None, None, Some(True), PrimitiveType("integer")), PropertyDefinition("children", Some("Child node ids."), None, None, Some(True), ArrayType(PrimitiveItem("integer"))), PropertyDefinition("deoptReason", Some("The reason of being not optimized. The function may be deoptimized or marked as don't\noptimize."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("positionTicks", Some("An array of source position ticks."), None, None, Some(True), ArrayType(ReferenceItem("PositionTickInfo")))]))
/// Profile.
pub type Profile {
  Profile(
    nodes: List(ProfileNode),
    start_time: Float,
    end_time: Float,
    samples: option.Option(List(Int)),
    time_deltas: option.Option(List(Int)),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("nodes", Some("The list of profile nodes. First item is the root node."), None, None, None, ArrayType(ReferenceItem("ProfileNode"))), PropertyDefinition("startTime", Some("Profiling start timestamp in microseconds."), None, None, None, PrimitiveType("number")), PropertyDefinition("endTime", Some("Profiling end timestamp in microseconds."), None, None, None, PrimitiveType("number")), PropertyDefinition("samples", Some("Ids of samples top nodes."), None, None, Some(True), ArrayType(PrimitiveItem("integer"))), PropertyDefinition("timeDeltas", Some("Time intervals between adjacent samples in microseconds. The first delta is relative to the\nprofile startTime."), None, None, Some(True), ArrayType(PrimitiveItem("integer")))]))
/// Specifies a number of samples attributed to a certain source position.
pub type PositionTickInfo {
  PositionTickInfo(line: Int, ticks: Int)
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("line", Some("Source line number (1-based)."), None, None, None, PrimitiveType("integer")), PropertyDefinition("ticks", Some("Number of samples attributed to the source line."), None, None, None, PrimitiveType("integer"))]))
/// Coverage data for a source range.
pub type CoverageRange {
  CoverageRange(start_offset: Int, end_offset: Int, count: Int)
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("startOffset", Some("JavaScript script source offset for the range start."), None, None, None, PrimitiveType("integer")), PropertyDefinition("endOffset", Some("JavaScript script source offset for the range end."), None, None, None, PrimitiveType("integer")), PropertyDefinition("count", Some("Collected execution count of the source range."), None, None, None, PrimitiveType("integer"))]))
/// Coverage data for a JavaScript function.
pub type FunctionCoverage {
  FunctionCoverage(
    function_name: String,
    ranges: List(CoverageRange),
    is_block_coverage: Bool,
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("functionName", Some("JavaScript function name."), None, None, None, PrimitiveType("string")), PropertyDefinition("ranges", Some("Source ranges inside the function with coverage data."), None, None, None, ArrayType(ReferenceItem("CoverageRange"))), PropertyDefinition("isBlockCoverage", Some("Whether coverage data for this function has block granularity."), None, None, None, PrimitiveType("boolean"))]))
/// Coverage data for a JavaScript script.
pub type ScriptCoverage {
  ScriptCoverage(
    script_id: runtime.ScriptId,
    url: String,
    functions: List(FunctionCoverage),
  )
}
// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("scriptId", Some("JavaScript script id."), None, None, None, RefType("Runtime.ScriptId")), PropertyDefinition("url", Some("JavaScript script name or url."), None, None, None, PrimitiveType("string")), PropertyDefinition("functions", Some("Functions contained in the script that has coverage data."), None, None, None, ArrayType(ReferenceItem("FunctionCoverage")))]))
