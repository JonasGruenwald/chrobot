//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Emulation Domain  
////
//// This domain emulates different environments for the page.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Emulation/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import chrome
import gleam/dynamic
import gleam/json
import protocol/dom
import protocol/page
import protocol/runtime

/// Screen orientation.
pub type ScreenOrientation {
  ScreenOrientation(type_: ScreenOrientationType, angle: Int)
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `type` of `ScreenOrientation`
pub type ScreenOrientationType {
  ScreenOrientationTypePortraitPrimary
  ScreenOrientationTypePortraitSecondary
  ScreenOrientationTypeLandscapePrimary
  ScreenOrientationTypeLandscapeSecondary
}

@internal
pub fn encode__screen_orientation_type(value: ScreenOrientationType) {
  case value {
    ScreenOrientationTypePortraitPrimary -> "portraitPrimary"
    ScreenOrientationTypePortraitSecondary -> "portraitSecondary"
    ScreenOrientationTypeLandscapePrimary -> "landscapePrimary"
    ScreenOrientationTypeLandscapeSecondary -> "landscapeSecondary"
  }
  |> json.string()
}

@internal
pub fn decode__screen_orientation_type(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("portraitPrimary") -> Ok(ScreenOrientationTypePortraitPrimary)
    Ok("portraitSecondary") -> Ok(ScreenOrientationTypePortraitSecondary)
    Ok("landscapePrimary") -> Ok(ScreenOrientationTypeLandscapePrimary)
    Ok("landscapeSecondary") -> Ok(ScreenOrientationTypeLandscapeSecondary)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("type", Some("Orientation type."), None, None, None, EnumType(["portraitPrimary", "portraitSecondary", "landscapePrimary", "landscapeSecondary"])), PropertyDefinition("angle", Some("Orientation angle."), None, None, None, PrimitiveType("integer"))]))
pub type DisplayFeature {
  DisplayFeature(
    orientation: DisplayFeatureOrientation,
    offset: Int,
    mask_length: Int,
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `orientation` of `DisplayFeature`
pub type DisplayFeatureOrientation {
  DisplayFeatureOrientationVertical
  DisplayFeatureOrientationHorizontal
}

@internal
pub fn encode__display_feature_orientation(value: DisplayFeatureOrientation) {
  case value {
    DisplayFeatureOrientationVertical -> "vertical"
    DisplayFeatureOrientationHorizontal -> "horizontal"
  }
  |> json.string()
}

@internal
pub fn decode__display_feature_orientation(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("vertical") -> Ok(DisplayFeatureOrientationVertical)
    Ok("horizontal") -> Ok(DisplayFeatureOrientationHorizontal)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("orientation", Some("Orientation of a display feature in relation to screen"), None, None, None, EnumType(["vertical", "horizontal"])), PropertyDefinition("offset", Some("The offset from the screen origin in either the x (for vertical\norientation) or y (for horizontal orientation) direction."), None, None, None, PrimitiveType("integer")), PropertyDefinition("maskLength", Some("A display feature may mask content such that it is not physically\ndisplayed - this length along with the offset describes this area.\nA display feature that only splits content will have a 0 mask_length."), None, None, None, PrimitiveType("integer"))]))
pub type DevicePosture {
  DevicePosture(type_: DevicePostureType)
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `type` of `DevicePosture`
pub type DevicePostureType {
  DevicePostureTypeContinuous
  DevicePostureTypeFolded
}

@internal
pub fn encode__device_posture_type(value: DevicePostureType) {
  case value {
    DevicePostureTypeContinuous -> "continuous"
    DevicePostureTypeFolded -> "folded"
  }
  |> json.string()
}

@internal
pub fn decode__device_posture_type(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("continuous") -> Ok(DevicePostureTypeContinuous)
    Ok("folded") -> Ok(DevicePostureTypeFolded)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("type", Some("Current posture of the device"), None, None, None, EnumType(["continuous", "folded"]))]))
pub type MediaFeature {
  MediaFeature(name: String, value: String)
}
// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("name", None, None, None, None, PrimitiveType("string")), PropertyDefinition("value", None, None, None, None, PrimitiveType("string"))]))
