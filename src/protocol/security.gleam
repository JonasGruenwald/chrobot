//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Security Domain  
////
//// Security  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Security/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import gleam/json
import gleam/option

/// An internal certificate ID value.
pub type CertificateId {
  CertificateId(Int)
}

@internal
pub fn encode__certificate_id(value: CertificateId) {
  case value {
    CertificateId(inner_value) -> json.int(inner_value)
  }
}

/// A description of mixed content (HTTP resources on HTTPS pages), as defined by
/// https://www.w3.org/TR/mixed-content/#categories
pub type MixedContentType {
  MixedContentTypeBlockable
  MixedContentTypeOptionallyBlockable
  MixedContentTypeNone
}

@internal
pub fn encode__mixed_content_type(value: MixedContentType) {
  case value {
    MixedContentTypeBlockable -> "blockable"
    MixedContentTypeOptionallyBlockable -> "optionally-blockable"
    MixedContentTypeNone -> "none"
  }
  |> json.string()
}

/// The security level of a page or resource.
pub type SecurityState {
  SecurityStateUnknown
  SecurityStateNeutral
  SecurityStateInsecure
  SecurityStateSecure
  SecurityStateInfo
  SecurityStateInsecureBroken
}

@internal
pub fn encode__security_state(value: SecurityState) {
  case value {
    SecurityStateUnknown -> "unknown"
    SecurityStateNeutral -> "neutral"
    SecurityStateInsecure -> "insecure"
    SecurityStateSecure -> "secure"
    SecurityStateInfo -> "info"
    SecurityStateInsecureBroken -> "insecure-broken"
  }
  |> json.string()
}

/// An explanation of an factor contributing to the security state.
pub type SecurityStateExplanation {
  SecurityStateExplanation(
    security_state: SecurityState,
    title: String,
    summary: String,
    description: String,
    mixed_content_type: MixedContentType,
    certificate: List(String),
    recommendations: option.Option(List(String)),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("securityState", Some("Security state representing the severity of the factor being explained."), None, None, None, RefType("SecurityState")), PropertyDefinition("title", Some("Title describing the type of factor."), None, None, None, PrimitiveType("string")), PropertyDefinition("summary", Some("Short phrase describing the type of factor."), None, None, None, PrimitiveType("string")), PropertyDefinition("description", Some("Full text explanation of the factor."), None, None, None, PrimitiveType("string")), PropertyDefinition("mixedContentType", Some("The type of mixed content described by the explanation."), None, None, None, RefType("MixedContentType")), PropertyDefinition("certificate", Some("Page certificate."), None, None, None, ArrayType(PrimitiveItem("string"))), PropertyDefinition("recommendations", Some("Recommendations to fix any issues."), None, None, Some(True), ArrayType(PrimitiveItem("string")))]))
/// The action to take when a certificate error occurs. continue will continue processing the
/// request and cancel will cancel the request.
pub type CertificateErrorAction {
  CertificateErrorActionContinue
  CertificateErrorActionCancel
}

@internal
pub fn encode__certificate_error_action(value: CertificateErrorAction) {
  case value {
    CertificateErrorActionContinue -> "continue"
    CertificateErrorActionCancel -> "cancel"
  }
  |> json.string()
}
