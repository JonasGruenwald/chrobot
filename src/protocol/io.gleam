//// > ‚öôÔ∏è  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## IO Domain  
////
//// Input/Output operations for streams produced by DevTools.  
////
//// [üìñ   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/IO/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import gleam/dynamic
import gleam/json
import gleam/option
import gleam/result
import protocol/runtime

/// This is either obtained from another method or specified as `blob:<uuid>` where
/// `<uuid>` is an UUID of a Blob.
pub type StreamHandle {
  StreamHandle(String)
}

@internal
pub fn encode__stream_handle(value__: StreamHandle) {
  case value__ {
    StreamHandle(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__stream_handle(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(StreamHandle, dynamic.string)
}

/// This type is not part of the protocol spec, it has been generated dynamically
/// to represent the response to the command `read`
pub type ReadResponse {
  ReadResponse(base64_encoded: option.Option(Bool), data: String, eof: Bool)
}

@internal
pub fn decode__read_response(value__: dynamic.Dynamic) {
  use base64_encoded <- result.try(dynamic.optional_field(
    "base64Encoded",
    dynamic.bool,
  )(value__))
  use data <- result.try(dynamic.field("data", dynamic.string)(value__))
  use eof <- result.try(dynamic.field("eof", dynamic.bool)(value__))

  Ok(ReadResponse(base64_encoded: base64_encoded, data: data, eof: eof))
}

/// This type is not part of the protocol spec, it has been generated dynamically
/// to represent the response to the command `resolve_blob`
pub type ResolveBlobResponse {
  ResolveBlobResponse(uuid: String)
}

@internal
pub fn decode__resolve_blob_response(value__: dynamic.Dynamic) {
  use uuid <- result.try(dynamic.field("uuid", dynamic.string)(value__))

  Ok(ResolveBlobResponse(uuid: uuid))
}

pub fn close(handle: StreamHandle) {
  todo
  // TODO generate command body
}

pub fn read(
  handle: StreamHandle,
  offset: option.Option(Int),
  size: option.Option(Int),
) {
  todo
  // TODO generate command body
}

pub fn resolve_blob(object_id: runtime.RemoteObjectId) {
  todo
  // TODO generate command body
}
