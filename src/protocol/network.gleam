//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Network Domain  
////
//// Network domain allows tracking network activities of the page. It exposes information about http,
//// file, data and other requests and responses, their headers, bodies, timing, etc.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Network/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import chrome
import gleam/dict
import gleam/dynamic
import gleam/json
import gleam/option
import protocol/debugger
import protocol/runtime
import protocol/security

/// Resource type as it was perceived by the rendering engine.
pub type ResourceType {
  ResourceTypeDocument
  ResourceTypeStylesheet
  ResourceTypeImage
  ResourceTypeMedia
  ResourceTypeFont
  ResourceTypeScript
  ResourceTypeTextTrack
  ResourceTypeXhr
  ResourceTypeFetch
  ResourceTypePrefetch
  ResourceTypeEventSource
  ResourceTypeWebSocket
  ResourceTypeManifest
  ResourceTypeSignedExchange
  ResourceTypePing
  ResourceTypeCspViolationReport
  ResourceTypePreflight
  ResourceTypeOther
}

@internal
pub fn encode__resource_type(value: ResourceType) {
  case value {
    ResourceTypeDocument -> "Document"
    ResourceTypeStylesheet -> "Stylesheet"
    ResourceTypeImage -> "Image"
    ResourceTypeMedia -> "Media"
    ResourceTypeFont -> "Font"
    ResourceTypeScript -> "Script"
    ResourceTypeTextTrack -> "TextTrack"
    ResourceTypeXhr -> "XHR"
    ResourceTypeFetch -> "Fetch"
    ResourceTypePrefetch -> "Prefetch"
    ResourceTypeEventSource -> "EventSource"
    ResourceTypeWebSocket -> "WebSocket"
    ResourceTypeManifest -> "Manifest"
    ResourceTypeSignedExchange -> "SignedExchange"
    ResourceTypePing -> "Ping"
    ResourceTypeCspViolationReport -> "CSPViolationReport"
    ResourceTypePreflight -> "Preflight"
    ResourceTypeOther -> "Other"
  }
  |> json.string()
}

/// Unique loader identifier.
pub type LoaderId {
  LoaderId(String)
}

@internal
pub fn encode__loader_id(value: LoaderId) {
  case value {
    LoaderId(inner_value) -> json.string(inner_value)
  }
}

/// Unique request identifier.
pub type RequestId {
  RequestId(String)
}

@internal
pub fn encode__request_id(value: RequestId) {
  case value {
    RequestId(inner_value) -> json.string(inner_value)
  }
}

/// Unique intercepted request identifier.
pub type InterceptionId {
  InterceptionId(String)
}

@internal
pub fn encode__interception_id(value: InterceptionId) {
  case value {
    InterceptionId(inner_value) -> json.string(inner_value)
  }
}

/// Network level fetch failure reason.
pub type ErrorReason {
  ErrorReasonFailed
  ErrorReasonAborted
  ErrorReasonTimedOut
  ErrorReasonAccessDenied
  ErrorReasonConnectionClosed
  ErrorReasonConnectionReset
  ErrorReasonConnectionRefused
  ErrorReasonConnectionAborted
  ErrorReasonConnectionFailed
  ErrorReasonNameNotResolved
  ErrorReasonInternetDisconnected
  ErrorReasonAddressUnreachable
  ErrorReasonBlockedByClient
  ErrorReasonBlockedByResponse
}

@internal
pub fn encode__error_reason(value: ErrorReason) {
  case value {
    ErrorReasonFailed -> "Failed"
    ErrorReasonAborted -> "Aborted"
    ErrorReasonTimedOut -> "TimedOut"
    ErrorReasonAccessDenied -> "AccessDenied"
    ErrorReasonConnectionClosed -> "ConnectionClosed"
    ErrorReasonConnectionReset -> "ConnectionReset"
    ErrorReasonConnectionRefused -> "ConnectionRefused"
    ErrorReasonConnectionAborted -> "ConnectionAborted"
    ErrorReasonConnectionFailed -> "ConnectionFailed"
    ErrorReasonNameNotResolved -> "NameNotResolved"
    ErrorReasonInternetDisconnected -> "InternetDisconnected"
    ErrorReasonAddressUnreachable -> "AddressUnreachable"
    ErrorReasonBlockedByClient -> "BlockedByClient"
    ErrorReasonBlockedByResponse -> "BlockedByResponse"
  }
  |> json.string()
}

/// UTC time in seconds, counted from January 1, 1970.
pub type TimeSinceEpoch {
  TimeSinceEpoch(Float)
}

@internal
pub fn encode__time_since_epoch(value: TimeSinceEpoch) {
  case value {
    TimeSinceEpoch(inner_value) -> json.float(inner_value)
  }
}

/// Monotonically increasing time in seconds since an arbitrary point in the past.
pub type MonotonicTime {
  MonotonicTime(Float)
}

@internal
pub fn encode__monotonic_time(value: MonotonicTime) {
  case value {
    MonotonicTime(inner_value) -> json.float(inner_value)
  }
}

/// Request / response headers as keys / values of JSON object.
pub type Headers {
  Headers(dict.Dict(String, String))
}

// TODO: implement type encoder for ObjectType(None)
/// The underlying connection technology that the browser is supposedly using.
pub type ConnectionType {
  ConnectionTypeNone
  ConnectionTypeCellular2g
  ConnectionTypeCellular3g
  ConnectionTypeCellular4g
  ConnectionTypeBluetooth
  ConnectionTypeEthernet
  ConnectionTypeWifi
  ConnectionTypeWimax
  ConnectionTypeOther
}

@internal
pub fn encode__connection_type(value: ConnectionType) {
  case value {
    ConnectionTypeNone -> "none"
    ConnectionTypeCellular2g -> "cellular2g"
    ConnectionTypeCellular3g -> "cellular3g"
    ConnectionTypeCellular4g -> "cellular4g"
    ConnectionTypeBluetooth -> "bluetooth"
    ConnectionTypeEthernet -> "ethernet"
    ConnectionTypeWifi -> "wifi"
    ConnectionTypeWimax -> "wimax"
    ConnectionTypeOther -> "other"
  }
  |> json.string()
}

/// Represents the cookie's 'SameSite' status:
/// https://tools.ietf.org/html/draft-west-first-party-cookies
pub type CookieSameSite {
  CookieSameSiteStrict
  CookieSameSiteLax
  CookieSameSiteNone
}

@internal
pub fn encode__cookie_same_site(value: CookieSameSite) {
  case value {
    CookieSameSiteStrict -> "Strict"
    CookieSameSiteLax -> "Lax"
    CookieSameSiteNone -> "None"
  }
  |> json.string()
}

/// Timing information for the request.
pub type ResourceTiming {
  ResourceTiming(
    request_time: Float,
    proxy_start: Float,
    proxy_end: Float,
    dns_start: Float,
    dns_end: Float,
    connect_start: Float,
    connect_end: Float,
    ssl_start: Float,
    ssl_end: Float,
    send_start: Float,
    send_end: Float,
    receive_headers_end: Float,
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("requestTime", Some("Timing's requestTime is a baseline in seconds, while the other numbers are ticks in\nmilliseconds relatively to this requestTime."), None, None, None, PrimitiveType("number")), PropertyDefinition("proxyStart", Some("Started resolving proxy."), None, None, None, PrimitiveType("number")), PropertyDefinition("proxyEnd", Some("Finished resolving proxy."), None, None, None, PrimitiveType("number")), PropertyDefinition("dnsStart", Some("Started DNS address resolve."), None, None, None, PrimitiveType("number")), PropertyDefinition("dnsEnd", Some("Finished DNS address resolve."), None, None, None, PrimitiveType("number")), PropertyDefinition("connectStart", Some("Started connecting to the remote host."), None, None, None, PrimitiveType("number")), PropertyDefinition("connectEnd", Some("Connected to the remote host."), None, None, None, PrimitiveType("number")), PropertyDefinition("sslStart", Some("Started SSL handshake."), None, None, None, PrimitiveType("number")), PropertyDefinition("sslEnd", Some("Finished SSL handshake."), None, None, None, PrimitiveType("number")), PropertyDefinition("sendStart", Some("Started sending request."), None, None, None, PrimitiveType("number")), PropertyDefinition("sendEnd", Some("Finished sending request."), None, None, None, PrimitiveType("number")), PropertyDefinition("receiveHeadersEnd", Some("Finished receiving response headers."), None, None, None, PrimitiveType("number"))]))
/// Loading priority of a resource request.
pub type ResourcePriority {
  ResourcePriorityVeryLow
  ResourcePriorityLow
  ResourcePriorityMedium
  ResourcePriorityHigh
  ResourcePriorityVeryHigh
}

@internal
pub fn encode__resource_priority(value: ResourcePriority) {
  case value {
    ResourcePriorityVeryLow -> "VeryLow"
    ResourcePriorityLow -> "Low"
    ResourcePriorityMedium -> "Medium"
    ResourcePriorityHigh -> "High"
    ResourcePriorityVeryHigh -> "VeryHigh"
  }
  |> json.string()
}

/// Post data entry for HTTP request
pub type PostDataEntry {
  PostDataEntry(bytes: option.Option(String))
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("bytes", None, None, None, Some(True), PrimitiveType("string"))]))
/// HTTP request data.
pub type Request {
  Request(
    url: String,
    url_fragment: option.Option(String),
    method: String,
    headers: Headers,
    has_post_data: option.Option(Bool),
    mixed_content_type: option.Option(security.MixedContentType),
    initial_priority: ResourcePriority,
    referrer_policy: RequestReferrerPolicy,
    is_link_preload: option.Option(Bool),
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `referrerPolicy` of `Request`
pub type RequestReferrerPolicy {
  RequestReferrerPolicyUnsafeUrl
  RequestReferrerPolicyNoReferrerWhenDowngrade
  RequestReferrerPolicyNoReferrer
  RequestReferrerPolicyOrigin
  RequestReferrerPolicyOriginWhenCrossOrigin
  RequestReferrerPolicySameOrigin
  RequestReferrerPolicyStrictOrigin
  RequestReferrerPolicyStrictOriginWhenCrossOrigin
}

@internal
pub fn encode__request_referrer_policy(value: RequestReferrerPolicy) {
  case value {
    RequestReferrerPolicyUnsafeUrl -> "unsafe-url"
    RequestReferrerPolicyNoReferrerWhenDowngrade -> "no-referrer-when-downgrade"
    RequestReferrerPolicyNoReferrer -> "no-referrer"
    RequestReferrerPolicyOrigin -> "origin"
    RequestReferrerPolicyOriginWhenCrossOrigin -> "origin-when-cross-origin"
    RequestReferrerPolicySameOrigin -> "same-origin"
    RequestReferrerPolicyStrictOrigin -> "strict-origin"
    RequestReferrerPolicyStrictOriginWhenCrossOrigin ->
      "strict-origin-when-cross-origin"
  }
  |> json.string()
}

@internal
pub fn decode__request_referrer_policy(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("unsafe-url") -> Ok(RequestReferrerPolicyUnsafeUrl)
    Ok("no-referrer-when-downgrade") ->
      Ok(RequestReferrerPolicyNoReferrerWhenDowngrade)
    Ok("no-referrer") -> Ok(RequestReferrerPolicyNoReferrer)
    Ok("origin") -> Ok(RequestReferrerPolicyOrigin)
    Ok("origin-when-cross-origin") ->
      Ok(RequestReferrerPolicyOriginWhenCrossOrigin)
    Ok("same-origin") -> Ok(RequestReferrerPolicySameOrigin)
    Ok("strict-origin") -> Ok(RequestReferrerPolicyStrictOrigin)
    Ok("strict-origin-when-cross-origin") ->
      Ok(RequestReferrerPolicyStrictOriginWhenCrossOrigin)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("url", Some("Request URL (without fragment)."), None, None, None, PrimitiveType("string")), PropertyDefinition("urlFragment", Some("Fragment of the requested URL starting with hash, if present."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("method", Some("HTTP request method."), None, None, None, PrimitiveType("string")), PropertyDefinition("headers", Some("HTTP request headers."), None, None, None, RefType("Headers")), PropertyDefinition("hasPostData", Some("True when the request has POST data. Note that postData might still be omitted when this flag is true when the data is too long."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("mixedContentType", Some("The mixed content type of the request."), None, None, Some(True), RefType("Security.MixedContentType")), PropertyDefinition("initialPriority", Some("Priority of the resource request at the time request is sent."), None, None, None, RefType("ResourcePriority")), PropertyDefinition("referrerPolicy", Some("The referrer policy of the request, as defined in https://www.w3.org/TR/referrer-policy/"), None, None, None, EnumType(["unsafe-url", "no-referrer-when-downgrade", "no-referrer", "origin", "origin-when-cross-origin", "same-origin", "strict-origin", "strict-origin-when-cross-origin"])), PropertyDefinition("isLinkPreload", Some("Whether is loaded via link preload."), None, None, Some(True), PrimitiveType("boolean"))]))
/// Details of a signed certificate timestamp (SCT).
pub type SignedCertificateTimestamp {
  SignedCertificateTimestamp(
    status: String,
    origin: String,
    log_description: String,
    log_id: String,
    timestamp: Float,
    hash_algorithm: String,
    signature_algorithm: String,
    signature_data: String,
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("status", Some("Validation status."), None, None, None, PrimitiveType("string")), PropertyDefinition("origin", Some("Origin."), None, None, None, PrimitiveType("string")), PropertyDefinition("logDescription", Some("Log name / description."), None, None, None, PrimitiveType("string")), PropertyDefinition("logId", Some("Log ID."), None, None, None, PrimitiveType("string")), PropertyDefinition("timestamp", Some("Issuance date. Unlike TimeSinceEpoch, this contains the number of\nmilliseconds since January 1, 1970, UTC, not the number of seconds."), None, None, None, PrimitiveType("number")), PropertyDefinition("hashAlgorithm", Some("Hash algorithm."), None, None, None, PrimitiveType("string")), PropertyDefinition("signatureAlgorithm", Some("Signature algorithm."), None, None, None, PrimitiveType("string")), PropertyDefinition("signatureData", Some("Signature data."), None, None, None, PrimitiveType("string"))]))
/// Security details about a request.
pub type SecurityDetails {
  SecurityDetails(
    protocol: String,
    key_exchange: String,
    key_exchange_group: option.Option(String),
    cipher: String,
    mac: option.Option(String),
    certificate_id: security.CertificateId,
    subject_name: String,
    san_list: List(String),
    issuer: String,
    valid_from: TimeSinceEpoch,
    valid_to: TimeSinceEpoch,
    signed_certificate_timestamp_list: List(SignedCertificateTimestamp),
    certificate_transparency_compliance: CertificateTransparencyCompliance,
    server_signature_algorithm: option.Option(Int),
    encrypted_client_hello: Bool,
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("protocol", Some("Protocol name (e.g. \"TLS 1.2\" or \"QUIC\")."), None, None, None, PrimitiveType("string")), PropertyDefinition("keyExchange", Some("Key Exchange used by the connection, or the empty string if not applicable."), None, None, None, PrimitiveType("string")), PropertyDefinition("keyExchangeGroup", Some("(EC)DH group used by the connection, if applicable."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("cipher", Some("Cipher name."), None, None, None, PrimitiveType("string")), PropertyDefinition("mac", Some("TLS MAC. Note that AEAD ciphers do not have separate MACs."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("certificateId", Some("Certificate ID value."), None, None, None, RefType("Security.CertificateId")), PropertyDefinition("subjectName", Some("Certificate subject name."), None, None, None, PrimitiveType("string")), PropertyDefinition("sanList", Some("Subject Alternative Name (SAN) DNS names and IP addresses."), None, None, None, ArrayType(PrimitiveItem("string"))), PropertyDefinition("issuer", Some("Name of the issuing CA."), None, None, None, PrimitiveType("string")), PropertyDefinition("validFrom", Some("Certificate valid from date."), None, None, None, RefType("TimeSinceEpoch")), PropertyDefinition("validTo", Some("Certificate valid to (expiration) date"), None, None, None, RefType("TimeSinceEpoch")), PropertyDefinition("signedCertificateTimestampList", Some("List of signed certificate timestamps (SCTs)."), None, None, None, ArrayType(ReferenceItem("SignedCertificateTimestamp"))), PropertyDefinition("certificateTransparencyCompliance", Some("Whether the request complied with Certificate Transparency policy"), None, None, None, RefType("CertificateTransparencyCompliance")), PropertyDefinition("serverSignatureAlgorithm", Some("The signature algorithm used by the server in the TLS server signature,\nrepresented as a TLS SignatureScheme code point. Omitted if not\napplicable or not known."), None, None, Some(True), PrimitiveType("integer")), PropertyDefinition("encryptedClientHello", Some("Whether the connection used Encrypted ClientHello"), None, None, None, PrimitiveType("boolean"))]))
/// Whether the request complied with Certificate Transparency policy.
pub type CertificateTransparencyCompliance {
  CertificateTransparencyComplianceUnknown
  CertificateTransparencyComplianceNotCompliant
  CertificateTransparencyComplianceCompliant
}

@internal
pub fn encode__certificate_transparency_compliance(value: CertificateTransparencyCompliance) {
  case value {
    CertificateTransparencyComplianceUnknown -> "unknown"
    CertificateTransparencyComplianceNotCompliant -> "not-compliant"
    CertificateTransparencyComplianceCompliant -> "compliant"
  }
  |> json.string()
}

/// The reason why request was blocked.
pub type BlockedReason {
  BlockedReasonOther
  BlockedReasonCsp
  BlockedReasonMixedContent
  BlockedReasonOrigin
  BlockedReasonInspector
  BlockedReasonSubresourceFilter
  BlockedReasonContentType
  BlockedReasonCoepFrameResourceNeedsCoepHeader
  BlockedReasonCoopSandboxedIframeCannotNavigateToCoopPage
  BlockedReasonCorpNotSameOrigin
  BlockedReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep
  BlockedReasonCorpNotSameSite
}

@internal
pub fn encode__blocked_reason(value: BlockedReason) {
  case value {
    BlockedReasonOther -> "other"
    BlockedReasonCsp -> "csp"
    BlockedReasonMixedContent -> "mixed-content"
    BlockedReasonOrigin -> "origin"
    BlockedReasonInspector -> "inspector"
    BlockedReasonSubresourceFilter -> "subresource-filter"
    BlockedReasonContentType -> "content-type"
    BlockedReasonCoepFrameResourceNeedsCoepHeader ->
      "coep-frame-resource-needs-coep-header"
    BlockedReasonCoopSandboxedIframeCannotNavigateToCoopPage ->
      "coop-sandboxed-iframe-cannot-navigate-to-coop-page"
    BlockedReasonCorpNotSameOrigin -> "corp-not-same-origin"
    BlockedReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep ->
      "corp-not-same-origin-after-defaulted-to-same-origin-by-coep"
    BlockedReasonCorpNotSameSite -> "corp-not-same-site"
  }
  |> json.string()
}

/// The reason why request was blocked.
pub type CorsError {
  CorsErrorDisallowedByMode
  CorsErrorInvalidResponse
  CorsErrorWildcardOriginNotAllowed
  CorsErrorMissingAllowOriginHeader
  CorsErrorMultipleAllowOriginValues
  CorsErrorInvalidAllowOriginValue
  CorsErrorAllowOriginMismatch
  CorsErrorInvalidAllowCredentials
  CorsErrorCorsDisabledScheme
  CorsErrorPreflightInvalidStatus
  CorsErrorPreflightDisallowedRedirect
  CorsErrorPreflightWildcardOriginNotAllowed
  CorsErrorPreflightMissingAllowOriginHeader
  CorsErrorPreflightMultipleAllowOriginValues
  CorsErrorPreflightInvalidAllowOriginValue
  CorsErrorPreflightAllowOriginMismatch
  CorsErrorPreflightInvalidAllowCredentials
  CorsErrorPreflightMissingAllowExternal
  CorsErrorPreflightInvalidAllowExternal
  CorsErrorPreflightMissingAllowPrivateNetwork
  CorsErrorPreflightInvalidAllowPrivateNetwork
  CorsErrorInvalidAllowMethodsPreflightResponse
  CorsErrorInvalidAllowHeadersPreflightResponse
  CorsErrorMethodDisallowedByPreflightResponse
  CorsErrorHeaderDisallowedByPreflightResponse
  CorsErrorRedirectContainsCredentials
  CorsErrorInsecurePrivateNetwork
  CorsErrorInvalidPrivateNetworkAccess
  CorsErrorUnexpectedPrivateNetworkAccess
  CorsErrorNoCorsRedirectModeNotFollow
  CorsErrorPreflightMissingPrivateNetworkAccessId
  CorsErrorPreflightMissingPrivateNetworkAccessName
  CorsErrorPrivateNetworkAccessPermissionUnavailable
  CorsErrorPrivateNetworkAccessPermissionDenied
}

@internal
pub fn encode__cors_error(value: CorsError) {
  case value {
    CorsErrorDisallowedByMode -> "DisallowedByMode"
    CorsErrorInvalidResponse -> "InvalidResponse"
    CorsErrorWildcardOriginNotAllowed -> "WildcardOriginNotAllowed"
    CorsErrorMissingAllowOriginHeader -> "MissingAllowOriginHeader"
    CorsErrorMultipleAllowOriginValues -> "MultipleAllowOriginValues"
    CorsErrorInvalidAllowOriginValue -> "InvalidAllowOriginValue"
    CorsErrorAllowOriginMismatch -> "AllowOriginMismatch"
    CorsErrorInvalidAllowCredentials -> "InvalidAllowCredentials"
    CorsErrorCorsDisabledScheme -> "CorsDisabledScheme"
    CorsErrorPreflightInvalidStatus -> "PreflightInvalidStatus"
    CorsErrorPreflightDisallowedRedirect -> "PreflightDisallowedRedirect"
    CorsErrorPreflightWildcardOriginNotAllowed ->
      "PreflightWildcardOriginNotAllowed"
    CorsErrorPreflightMissingAllowOriginHeader ->
      "PreflightMissingAllowOriginHeader"
    CorsErrorPreflightMultipleAllowOriginValues ->
      "PreflightMultipleAllowOriginValues"
    CorsErrorPreflightInvalidAllowOriginValue ->
      "PreflightInvalidAllowOriginValue"
    CorsErrorPreflightAllowOriginMismatch -> "PreflightAllowOriginMismatch"
    CorsErrorPreflightInvalidAllowCredentials ->
      "PreflightInvalidAllowCredentials"
    CorsErrorPreflightMissingAllowExternal -> "PreflightMissingAllowExternal"
    CorsErrorPreflightInvalidAllowExternal -> "PreflightInvalidAllowExternal"
    CorsErrorPreflightMissingAllowPrivateNetwork ->
      "PreflightMissingAllowPrivateNetwork"
    CorsErrorPreflightInvalidAllowPrivateNetwork ->
      "PreflightInvalidAllowPrivateNetwork"
    CorsErrorInvalidAllowMethodsPreflightResponse ->
      "InvalidAllowMethodsPreflightResponse"
    CorsErrorInvalidAllowHeadersPreflightResponse ->
      "InvalidAllowHeadersPreflightResponse"
    CorsErrorMethodDisallowedByPreflightResponse ->
      "MethodDisallowedByPreflightResponse"
    CorsErrorHeaderDisallowedByPreflightResponse ->
      "HeaderDisallowedByPreflightResponse"
    CorsErrorRedirectContainsCredentials -> "RedirectContainsCredentials"
    CorsErrorInsecurePrivateNetwork -> "InsecurePrivateNetwork"
    CorsErrorInvalidPrivateNetworkAccess -> "InvalidPrivateNetworkAccess"
    CorsErrorUnexpectedPrivateNetworkAccess -> "UnexpectedPrivateNetworkAccess"
    CorsErrorNoCorsRedirectModeNotFollow -> "NoCorsRedirectModeNotFollow"
    CorsErrorPreflightMissingPrivateNetworkAccessId ->
      "PreflightMissingPrivateNetworkAccessId"
    CorsErrorPreflightMissingPrivateNetworkAccessName ->
      "PreflightMissingPrivateNetworkAccessName"
    CorsErrorPrivateNetworkAccessPermissionUnavailable ->
      "PrivateNetworkAccessPermissionUnavailable"
    CorsErrorPrivateNetworkAccessPermissionDenied ->
      "PrivateNetworkAccessPermissionDenied"
  }
  |> json.string()
}

pub type CorsErrorStatus {
  CorsErrorStatus(cors_error: CorsError, failed_parameter: String)
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("corsError", None, None, None, None, RefType("CorsError")), PropertyDefinition("failedParameter", None, None, None, None, PrimitiveType("string"))]))
/// Source of serviceworker response.
pub type ServiceWorkerResponseSource {
  ServiceWorkerResponseSourceCacheStorage
  ServiceWorkerResponseSourceHttpCache
  ServiceWorkerResponseSourceFallbackCode
  ServiceWorkerResponseSourceNetwork
}

@internal
pub fn encode__service_worker_response_source(value: ServiceWorkerResponseSource) {
  case value {
    ServiceWorkerResponseSourceCacheStorage -> "cache-storage"
    ServiceWorkerResponseSourceHttpCache -> "http-cache"
    ServiceWorkerResponseSourceFallbackCode -> "fallback-code"
    ServiceWorkerResponseSourceNetwork -> "network"
  }
  |> json.string()
}

/// Source of service worker router.
pub type ServiceWorkerRouterSource {
  ServiceWorkerRouterSourceNetwork
  ServiceWorkerRouterSourceCache
  ServiceWorkerRouterSourceFetchEvent
  ServiceWorkerRouterSourceRaceNetworkAndFetchHandler
}

@internal
pub fn encode__service_worker_router_source(value: ServiceWorkerRouterSource) {
  case value {
    ServiceWorkerRouterSourceNetwork -> "network"
    ServiceWorkerRouterSourceCache -> "cache"
    ServiceWorkerRouterSourceFetchEvent -> "fetch-event"
    ServiceWorkerRouterSourceRaceNetworkAndFetchHandler ->
      "race-network-and-fetch-handler"
  }
  |> json.string()
}

/// HTTP response data.
pub type Response {
  Response(
    url: String,
    status: Int,
    status_text: String,
    headers: Headers,
    mime_type: String,
    charset: String,
    request_headers: option.Option(Headers),
    connection_reused: Bool,
    connection_id: Float,
    remote_ip_address: option.Option(String),
    remote_port: option.Option(Int),
    from_disk_cache: option.Option(Bool),
    from_service_worker: option.Option(Bool),
    from_prefetch_cache: option.Option(Bool),
    from_early_hints: option.Option(Bool),
    encoded_data_length: Float,
    timing: option.Option(ResourceTiming),
    service_worker_response_source: option.Option(ServiceWorkerResponseSource),
    response_time: option.Option(TimeSinceEpoch),
    cache_storage_cache_name: option.Option(String),
    protocol: option.Option(String),
    security_state: security.SecurityState,
    security_details: option.Option(SecurityDetails),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("url", Some("Response URL. This URL can be different from CachedResource.url in case of redirect."), None, None, None, PrimitiveType("string")), PropertyDefinition("status", Some("HTTP response status code."), None, None, None, PrimitiveType("integer")), PropertyDefinition("statusText", Some("HTTP response status text."), None, None, None, PrimitiveType("string")), PropertyDefinition("headers", Some("HTTP response headers."), None, None, None, RefType("Headers")), PropertyDefinition("mimeType", Some("Resource mimeType as determined by the browser."), None, None, None, PrimitiveType("string")), PropertyDefinition("charset", Some("Resource charset as determined by the browser (if applicable)."), None, None, None, PrimitiveType("string")), PropertyDefinition("requestHeaders", Some("Refined HTTP request headers that were actually transmitted over the network."), None, None, Some(True), RefType("Headers")), PropertyDefinition("connectionReused", Some("Specifies whether physical connection was actually reused for this request."), None, None, None, PrimitiveType("boolean")), PropertyDefinition("connectionId", Some("Physical connection id that was actually used for this request."), None, None, None, PrimitiveType("number")), PropertyDefinition("remoteIPAddress", Some("Remote IP address."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("remotePort", Some("Remote port."), None, None, Some(True), PrimitiveType("integer")), PropertyDefinition("fromDiskCache", Some("Specifies that the request was served from the disk cache."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("fromServiceWorker", Some("Specifies that the request was served from the ServiceWorker."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("fromPrefetchCache", Some("Specifies that the request was served from the prefetch cache."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("fromEarlyHints", Some("Specifies that the request was served from the prefetch cache."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("encodedDataLength", Some("Total number of bytes received for this request so far."), None, None, None, PrimitiveType("number")), PropertyDefinition("timing", Some("Timing information for the given request."), None, None, Some(True), RefType("ResourceTiming")), PropertyDefinition("serviceWorkerResponseSource", Some("Response source of response from ServiceWorker."), None, None, Some(True), RefType("ServiceWorkerResponseSource")), PropertyDefinition("responseTime", Some("The time at which the returned response was generated."), None, None, Some(True), RefType("TimeSinceEpoch")), PropertyDefinition("cacheStorageCacheName", Some("Cache Storage Cache Name."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("protocol", Some("Protocol used to fetch this request."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("securityState", Some("Security state of the request resource."), None, None, None, RefType("Security.SecurityState")), PropertyDefinition("securityDetails", Some("Security details for the request."), None, None, Some(True), RefType("SecurityDetails"))]))
/// WebSocket request data.
pub type WebSocketRequest {
  WebSocketRequest(headers: Headers)
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("headers", Some("HTTP request headers."), None, None, None, RefType("Headers"))]))
/// WebSocket response data.
pub type WebSocketResponse {
  WebSocketResponse(
    status: Int,
    status_text: String,
    headers: Headers,
    headers_text: option.Option(String),
    request_headers: option.Option(Headers),
    request_headers_text: option.Option(String),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("status", Some("HTTP response status code."), None, None, None, PrimitiveType("integer")), PropertyDefinition("statusText", Some("HTTP response status text."), None, None, None, PrimitiveType("string")), PropertyDefinition("headers", Some("HTTP response headers."), None, None, None, RefType("Headers")), PropertyDefinition("headersText", Some("HTTP response headers text."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("requestHeaders", Some("HTTP request headers."), None, None, Some(True), RefType("Headers")), PropertyDefinition("requestHeadersText", Some("HTTP request headers text."), None, None, Some(True), PrimitiveType("string"))]))
/// WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.
pub type WebSocketFrame {
  WebSocketFrame(opcode: Float, mask: Bool, payload_data: String)
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("opcode", Some("WebSocket message opcode."), None, None, None, PrimitiveType("number")), PropertyDefinition("mask", Some("WebSocket message mask."), None, None, None, PrimitiveType("boolean")), PropertyDefinition("payloadData", Some("WebSocket message payload data.\nIf the opcode is 1, this is a text message and payloadData is a UTF-8 string.\nIf the opcode isn't 1, then payloadData is a base64 encoded string representing binary data."), None, None, None, PrimitiveType("string"))]))
/// Information about the cached resource.
pub type CachedResource {
  CachedResource(
    url: String,
    type_: ResourceType,
    response: option.Option(Response),
    body_size: Float,
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("url", Some("Resource URL. This is the url of the original network request."), None, None, None, PrimitiveType("string")), PropertyDefinition("type", Some("Type of this resource."), None, None, None, RefType("ResourceType")), PropertyDefinition("response", Some("Cached response data."), None, None, Some(True), RefType("Response")), PropertyDefinition("bodySize", Some("Cached response body size."), None, None, None, PrimitiveType("number"))]))
/// Information about the request initiator.
pub type Initiator {
  Initiator(
    type_: InitiatorType,
    stack: option.Option(runtime.StackTrace),
    url: option.Option(String),
    line_number: option.Option(Float),
    column_number: option.Option(Float),
    request_id: option.Option(RequestId),
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `type` of `Initiator`
pub type InitiatorType {
  InitiatorTypeParser
  InitiatorTypeScript
  InitiatorTypePreload
  InitiatorTypeSignedExchange
  InitiatorTypePreflight
  InitiatorTypeOther
}

@internal
pub fn encode__initiator_type(value: InitiatorType) {
  case value {
    InitiatorTypeParser -> "parser"
    InitiatorTypeScript -> "script"
    InitiatorTypePreload -> "preload"
    InitiatorTypeSignedExchange -> "SignedExchange"
    InitiatorTypePreflight -> "preflight"
    InitiatorTypeOther -> "other"
  }
  |> json.string()
}

@internal
pub fn decode__initiator_type(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("parser") -> Ok(InitiatorTypeParser)
    Ok("script") -> Ok(InitiatorTypeScript)
    Ok("preload") -> Ok(InitiatorTypePreload)
    Ok("SignedExchange") -> Ok(InitiatorTypeSignedExchange)
    Ok("preflight") -> Ok(InitiatorTypePreflight)
    Ok("other") -> Ok(InitiatorTypeOther)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("type", Some("Type of this initiator."), None, None, None, EnumType(["parser", "script", "preload", "SignedExchange", "preflight", "other"])), PropertyDefinition("stack", Some("Initiator JavaScript stack trace, set for Script only."), None, None, Some(True), RefType("Runtime.StackTrace")), PropertyDefinition("url", Some("Initiator URL, set for Parser type or for Script type (when script is importing module) or for SignedExchange type."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("lineNumber", Some("Initiator line number, set for Parser type or for Script type (when script is importing\nmodule) (0-based)."), None, None, Some(True), PrimitiveType("number")), PropertyDefinition("columnNumber", Some("Initiator column number, set for Parser type or for Script type (when script is importing\nmodule) (0-based)."), None, None, Some(True), PrimitiveType("number")), PropertyDefinition("requestId", Some("Set if another request triggered this request (e.g. preflight)."), None, None, Some(True), RefType("RequestId"))]))
/// Cookie object
pub type Cookie {
  Cookie(
    name: String,
    value: String,
    domain: String,
    path: String,
    expires: Float,
    size: Int,
    http_only: Bool,
    secure: Bool,
    session: Bool,
    same_site: option.Option(CookieSameSite),
  )
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("name", Some("Cookie name."), None, None, None, PrimitiveType("string")), PropertyDefinition("value", Some("Cookie value."), None, None, None, PrimitiveType("string")), PropertyDefinition("domain", Some("Cookie domain."), None, None, None, PrimitiveType("string")), PropertyDefinition("path", Some("Cookie path."), None, None, None, PrimitiveType("string")), PropertyDefinition("expires", Some("Cookie expiration date as the number of seconds since the UNIX epoch."), None, None, None, PrimitiveType("number")), PropertyDefinition("size", Some("Cookie size."), None, None, None, PrimitiveType("integer")), PropertyDefinition("httpOnly", Some("True if cookie is http-only."), None, None, None, PrimitiveType("boolean")), PropertyDefinition("secure", Some("True if cookie is secure."), None, None, None, PrimitiveType("boolean")), PropertyDefinition("session", Some("True in case of session cookie."), None, None, None, PrimitiveType("boolean")), PropertyDefinition("sameSite", Some("Cookie SameSite type."), None, None, Some(True), RefType("CookieSameSite"))]))
/// Cookie parameter object
pub type CookieParam {
  CookieParam(
    name: String,
    value: String,
    url: option.Option(String),
    domain: option.Option(String),
    path: option.Option(String),
    secure: option.Option(Bool),
    http_only: option.Option(Bool),
    same_site: option.Option(CookieSameSite),
    expires: option.Option(TimeSinceEpoch),
  )
}
// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("name", Some("Cookie name."), None, None, None, PrimitiveType("string")), PropertyDefinition("value", Some("Cookie value."), None, None, None, PrimitiveType("string")), PropertyDefinition("url", Some("The request-URI to associate with the setting of the cookie. This value can affect the\ndefault domain, path, source port, and source scheme values of the created cookie."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("domain", Some("Cookie domain."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("path", Some("Cookie path."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("secure", Some("True if cookie is secure."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("httpOnly", Some("True if cookie is http-only."), None, None, Some(True), PrimitiveType("boolean")), PropertyDefinition("sameSite", Some("Cookie SameSite type."), None, None, Some(True), RefType("CookieSameSite")), PropertyDefinition("expires", Some("Cookie expiration date, session cookie if not set"), None, None, Some(True), RefType("TimeSinceEpoch"))]))
