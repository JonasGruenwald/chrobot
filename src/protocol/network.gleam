//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Network Domain  
////
//// Network domain allows tracking network activities of the page. It exposes information about http,
//// file, data and other requests and responses, their headers, bodies, timing, etc.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Network/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import chrome
import gleam/dict
import gleam/dynamic
import gleam/json
import gleam/list
import gleam/option
import gleam/result
import protocol/debugger
import protocol/runtime
import protocol/security

/// Resource type as it was perceived by the rendering engine.
pub type ResourceType {
  ResourceTypeDocument
  ResourceTypeStylesheet
  ResourceTypeImage
  ResourceTypeMedia
  ResourceTypeFont
  ResourceTypeScript
  ResourceTypeTextTrack
  ResourceTypeXhr
  ResourceTypeFetch
  ResourceTypePrefetch
  ResourceTypeEventSource
  ResourceTypeWebSocket
  ResourceTypeManifest
  ResourceTypeSignedExchange
  ResourceTypePing
  ResourceTypeCspViolationReport
  ResourceTypePreflight
  ResourceTypeOther
}

@internal
pub fn encode__resource_type(value__: ResourceType) {
  case value__ {
    ResourceTypeDocument -> "Document"
    ResourceTypeStylesheet -> "Stylesheet"
    ResourceTypeImage -> "Image"
    ResourceTypeMedia -> "Media"
    ResourceTypeFont -> "Font"
    ResourceTypeScript -> "Script"
    ResourceTypeTextTrack -> "TextTrack"
    ResourceTypeXhr -> "XHR"
    ResourceTypeFetch -> "Fetch"
    ResourceTypePrefetch -> "Prefetch"
    ResourceTypeEventSource -> "EventSource"
    ResourceTypeWebSocket -> "WebSocket"
    ResourceTypeManifest -> "Manifest"
    ResourceTypeSignedExchange -> "SignedExchange"
    ResourceTypePing -> "Ping"
    ResourceTypeCspViolationReport -> "CSPViolationReport"
    ResourceTypePreflight -> "Preflight"
    ResourceTypeOther -> "Other"
  }
  |> json.string()
}

@internal
pub fn decode__resource_type(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("Document") -> Ok(ResourceTypeDocument)
    Ok("Stylesheet") -> Ok(ResourceTypeStylesheet)
    Ok("Image") -> Ok(ResourceTypeImage)
    Ok("Media") -> Ok(ResourceTypeMedia)
    Ok("Font") -> Ok(ResourceTypeFont)
    Ok("Script") -> Ok(ResourceTypeScript)
    Ok("TextTrack") -> Ok(ResourceTypeTextTrack)
    Ok("XHR") -> Ok(ResourceTypeXhr)
    Ok("Fetch") -> Ok(ResourceTypeFetch)
    Ok("Prefetch") -> Ok(ResourceTypePrefetch)
    Ok("EventSource") -> Ok(ResourceTypeEventSource)
    Ok("WebSocket") -> Ok(ResourceTypeWebSocket)
    Ok("Manifest") -> Ok(ResourceTypeManifest)
    Ok("SignedExchange") -> Ok(ResourceTypeSignedExchange)
    Ok("Ping") -> Ok(ResourceTypePing)
    Ok("CSPViolationReport") -> Ok(ResourceTypeCspViolationReport)
    Ok("Preflight") -> Ok(ResourceTypePreflight)
    Ok("Other") -> Ok(ResourceTypeOther)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// Unique loader identifier.
pub type LoaderId {
  LoaderId(String)
}

@internal
pub fn encode__loader_id(value__: LoaderId) {
  case value__ {
    LoaderId(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__loader_id(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(LoaderId, dynamic.string)
}

/// Unique request identifier.
pub type RequestId {
  RequestId(String)
}

@internal
pub fn encode__request_id(value__: RequestId) {
  case value__ {
    RequestId(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__request_id(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(RequestId, dynamic.string)
}

/// Unique intercepted request identifier.
pub type InterceptionId {
  InterceptionId(String)
}

@internal
pub fn encode__interception_id(value__: InterceptionId) {
  case value__ {
    InterceptionId(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__interception_id(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(InterceptionId, dynamic.string)
}

/// Network level fetch failure reason.
pub type ErrorReason {
  ErrorReasonFailed
  ErrorReasonAborted
  ErrorReasonTimedOut
  ErrorReasonAccessDenied
  ErrorReasonConnectionClosed
  ErrorReasonConnectionReset
  ErrorReasonConnectionRefused
  ErrorReasonConnectionAborted
  ErrorReasonConnectionFailed
  ErrorReasonNameNotResolved
  ErrorReasonInternetDisconnected
  ErrorReasonAddressUnreachable
  ErrorReasonBlockedByClient
  ErrorReasonBlockedByResponse
}

@internal
pub fn encode__error_reason(value__: ErrorReason) {
  case value__ {
    ErrorReasonFailed -> "Failed"
    ErrorReasonAborted -> "Aborted"
    ErrorReasonTimedOut -> "TimedOut"
    ErrorReasonAccessDenied -> "AccessDenied"
    ErrorReasonConnectionClosed -> "ConnectionClosed"
    ErrorReasonConnectionReset -> "ConnectionReset"
    ErrorReasonConnectionRefused -> "ConnectionRefused"
    ErrorReasonConnectionAborted -> "ConnectionAborted"
    ErrorReasonConnectionFailed -> "ConnectionFailed"
    ErrorReasonNameNotResolved -> "NameNotResolved"
    ErrorReasonInternetDisconnected -> "InternetDisconnected"
    ErrorReasonAddressUnreachable -> "AddressUnreachable"
    ErrorReasonBlockedByClient -> "BlockedByClient"
    ErrorReasonBlockedByResponse -> "BlockedByResponse"
  }
  |> json.string()
}

@internal
pub fn decode__error_reason(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("Failed") -> Ok(ErrorReasonFailed)
    Ok("Aborted") -> Ok(ErrorReasonAborted)
    Ok("TimedOut") -> Ok(ErrorReasonTimedOut)
    Ok("AccessDenied") -> Ok(ErrorReasonAccessDenied)
    Ok("ConnectionClosed") -> Ok(ErrorReasonConnectionClosed)
    Ok("ConnectionReset") -> Ok(ErrorReasonConnectionReset)
    Ok("ConnectionRefused") -> Ok(ErrorReasonConnectionRefused)
    Ok("ConnectionAborted") -> Ok(ErrorReasonConnectionAborted)
    Ok("ConnectionFailed") -> Ok(ErrorReasonConnectionFailed)
    Ok("NameNotResolved") -> Ok(ErrorReasonNameNotResolved)
    Ok("InternetDisconnected") -> Ok(ErrorReasonInternetDisconnected)
    Ok("AddressUnreachable") -> Ok(ErrorReasonAddressUnreachable)
    Ok("BlockedByClient") -> Ok(ErrorReasonBlockedByClient)
    Ok("BlockedByResponse") -> Ok(ErrorReasonBlockedByResponse)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// UTC time in seconds, counted from January 1, 1970.
pub type TimeSinceEpoch {
  TimeSinceEpoch(Float)
}

@internal
pub fn encode__time_since_epoch(value__: TimeSinceEpoch) {
  case value__ {
    TimeSinceEpoch(inner_value__) -> json.float(inner_value__)
  }
}

@internal
pub fn decode__time_since_epoch(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(TimeSinceEpoch, dynamic.float)
}

/// Monotonically increasing time in seconds since an arbitrary point in the past.
pub type MonotonicTime {
  MonotonicTime(Float)
}

@internal
pub fn encode__monotonic_time(value__: MonotonicTime) {
  case value__ {
    MonotonicTime(inner_value__) -> json.float(inner_value__)
  }
}

@internal
pub fn decode__monotonic_time(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(MonotonicTime, dynamic.float)
}

/// Request / response headers as keys / values of JSON object.
pub type Headers {
  Headers(dict.Dict(String, String))
}

@internal
pub fn encode__headers(value__: Headers) {
  case value__ {
    Headers(inner_value__) ->
      dict.to_list(inner_value__)
      |> list.map(fn(i) { #(i.0, json.string(i.1)) })
      |> json.object
  }
}

@internal
pub fn decode__headers(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(Headers, dynamic.dict(dynamic.string, dynamic.string))
}

/// The underlying connection technology that the browser is supposedly using.
pub type ConnectionType {
  ConnectionTypeNone
  ConnectionTypeCellular2g
  ConnectionTypeCellular3g
  ConnectionTypeCellular4g
  ConnectionTypeBluetooth
  ConnectionTypeEthernet
  ConnectionTypeWifi
  ConnectionTypeWimax
  ConnectionTypeOther
}

@internal
pub fn encode__connection_type(value__: ConnectionType) {
  case value__ {
    ConnectionTypeNone -> "none"
    ConnectionTypeCellular2g -> "cellular2g"
    ConnectionTypeCellular3g -> "cellular3g"
    ConnectionTypeCellular4g -> "cellular4g"
    ConnectionTypeBluetooth -> "bluetooth"
    ConnectionTypeEthernet -> "ethernet"
    ConnectionTypeWifi -> "wifi"
    ConnectionTypeWimax -> "wimax"
    ConnectionTypeOther -> "other"
  }
  |> json.string()
}

@internal
pub fn decode__connection_type(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("none") -> Ok(ConnectionTypeNone)
    Ok("cellular2g") -> Ok(ConnectionTypeCellular2g)
    Ok("cellular3g") -> Ok(ConnectionTypeCellular3g)
    Ok("cellular4g") -> Ok(ConnectionTypeCellular4g)
    Ok("bluetooth") -> Ok(ConnectionTypeBluetooth)
    Ok("ethernet") -> Ok(ConnectionTypeEthernet)
    Ok("wifi") -> Ok(ConnectionTypeWifi)
    Ok("wimax") -> Ok(ConnectionTypeWimax)
    Ok("other") -> Ok(ConnectionTypeOther)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// Represents the cookie's 'SameSite' status:
/// https://tools.ietf.org/html/draft-west-first-party-cookies
pub type CookieSameSite {
  CookieSameSiteStrict
  CookieSameSiteLax
  CookieSameSiteNone
}

@internal
pub fn encode__cookie_same_site(value__: CookieSameSite) {
  case value__ {
    CookieSameSiteStrict -> "Strict"
    CookieSameSiteLax -> "Lax"
    CookieSameSiteNone -> "None"
  }
  |> json.string()
}

@internal
pub fn decode__cookie_same_site(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("Strict") -> Ok(CookieSameSiteStrict)
    Ok("Lax") -> Ok(CookieSameSiteLax)
    Ok("None") -> Ok(CookieSameSiteNone)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// Timing information for the request.
pub type ResourceTiming {
  ResourceTiming(
    request_time: Float,
    proxy_start: Float,
    proxy_end: Float,
    dns_start: Float,
    dns_end: Float,
    connect_start: Float,
    connect_end: Float,
    ssl_start: Float,
    ssl_end: Float,
    send_start: Float,
    send_end: Float,
    receive_headers_end: Float,
  )
}

@internal
pub fn encode__resource_timing(value__: ResourceTiming) {
  json.object([
    #("requestTime", json.float(value__.request_time)),
    #("proxyStart", json.float(value__.proxy_start)),
    #("proxyEnd", json.float(value__.proxy_end)),
    #("dnsStart", json.float(value__.dns_start)),
    #("dnsEnd", json.float(value__.dns_end)),
    #("connectStart", json.float(value__.connect_start)),
    #("connectEnd", json.float(value__.connect_end)),
    #("sslStart", json.float(value__.ssl_start)),
    #("sslEnd", json.float(value__.ssl_end)),
    #("sendStart", json.float(value__.send_start)),
    #("sendEnd", json.float(value__.send_end)),
    #("receiveHeadersEnd", json.float(value__.receive_headers_end)),
  ])
}

@internal
pub fn decode__resource_timing(value__: dynamic.Dynamic) {
  use request_time <- result.try(dynamic.field("requestTime", dynamic.float)(
    value__,
  ))
  use proxy_start <- result.try(dynamic.field("proxyStart", dynamic.float)(
    value__,
  ))
  use proxy_end <- result.try(dynamic.field("proxyEnd", dynamic.float)(value__))
  use dns_start <- result.try(dynamic.field("dnsStart", dynamic.float)(value__))
  use dns_end <- result.try(dynamic.field("dnsEnd", dynamic.float)(value__))
  use connect_start <- result.try(dynamic.field("connectStart", dynamic.float)(
    value__,
  ))
  use connect_end <- result.try(dynamic.field("connectEnd", dynamic.float)(
    value__,
  ))
  use ssl_start <- result.try(dynamic.field("sslStart", dynamic.float)(value__))
  use ssl_end <- result.try(dynamic.field("sslEnd", dynamic.float)(value__))
  use send_start <- result.try(dynamic.field("sendStart", dynamic.float)(
    value__,
  ))
  use send_end <- result.try(dynamic.field("sendEnd", dynamic.float)(value__))
  use receive_headers_end <- result.try(dynamic.field(
    "receiveHeadersEnd",
    dynamic.float,
  )(value__))

  Ok(ResourceTiming(
    request_time: request_time,
    proxy_start: proxy_start,
    proxy_end: proxy_end,
    dns_start: dns_start,
    dns_end: dns_end,
    connect_start: connect_start,
    connect_end: connect_end,
    ssl_start: ssl_start,
    ssl_end: ssl_end,
    send_start: send_start,
    send_end: send_end,
    receive_headers_end: receive_headers_end,
  ))
}

/// Loading priority of a resource request.
pub type ResourcePriority {
  ResourcePriorityVeryLow
  ResourcePriorityLow
  ResourcePriorityMedium
  ResourcePriorityHigh
  ResourcePriorityVeryHigh
}

@internal
pub fn encode__resource_priority(value__: ResourcePriority) {
  case value__ {
    ResourcePriorityVeryLow -> "VeryLow"
    ResourcePriorityLow -> "Low"
    ResourcePriorityMedium -> "Medium"
    ResourcePriorityHigh -> "High"
    ResourcePriorityVeryHigh -> "VeryHigh"
  }
  |> json.string()
}

@internal
pub fn decode__resource_priority(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("VeryLow") -> Ok(ResourcePriorityVeryLow)
    Ok("Low") -> Ok(ResourcePriorityLow)
    Ok("Medium") -> Ok(ResourcePriorityMedium)
    Ok("High") -> Ok(ResourcePriorityHigh)
    Ok("VeryHigh") -> Ok(ResourcePriorityVeryHigh)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// Post data entry for HTTP request
pub type PostDataEntry {
  PostDataEntry(bytes: option.Option(String))
}

@internal
pub fn encode__post_data_entry(value__: PostDataEntry) {
  json.object([
    #("bytes", {
      case value__.bytes {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__post_data_entry(value__: dynamic.Dynamic) {
  use bytes <- result.try(dynamic.optional_field("bytes", dynamic.string)(
    value__,
  ))

  Ok(PostDataEntry(bytes: bytes))
}

/// HTTP request data.
pub type Request {
  Request(
    url: String,
    url_fragment: option.Option(String),
    method: String,
    headers: Headers,
    has_post_data: option.Option(Bool),
    mixed_content_type: option.Option(security.MixedContentType),
    initial_priority: ResourcePriority,
    referrer_policy: RequestReferrerPolicy,
    is_link_preload: option.Option(Bool),
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `referrerPolicy` of `Request`
pub type RequestReferrerPolicy {
  RequestReferrerPolicyUnsafeUrl
  RequestReferrerPolicyNoReferrerWhenDowngrade
  RequestReferrerPolicyNoReferrer
  RequestReferrerPolicyOrigin
  RequestReferrerPolicyOriginWhenCrossOrigin
  RequestReferrerPolicySameOrigin
  RequestReferrerPolicyStrictOrigin
  RequestReferrerPolicyStrictOriginWhenCrossOrigin
}

@internal
pub fn encode__request_referrer_policy(value__: RequestReferrerPolicy) {
  case value__ {
    RequestReferrerPolicyUnsafeUrl -> "unsafe-url"
    RequestReferrerPolicyNoReferrerWhenDowngrade -> "no-referrer-when-downgrade"
    RequestReferrerPolicyNoReferrer -> "no-referrer"
    RequestReferrerPolicyOrigin -> "origin"
    RequestReferrerPolicyOriginWhenCrossOrigin -> "origin-when-cross-origin"
    RequestReferrerPolicySameOrigin -> "same-origin"
    RequestReferrerPolicyStrictOrigin -> "strict-origin"
    RequestReferrerPolicyStrictOriginWhenCrossOrigin ->
      "strict-origin-when-cross-origin"
  }
  |> json.string()
}

@internal
pub fn decode__request_referrer_policy(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("unsafe-url") -> Ok(RequestReferrerPolicyUnsafeUrl)
    Ok("no-referrer-when-downgrade") ->
      Ok(RequestReferrerPolicyNoReferrerWhenDowngrade)
    Ok("no-referrer") -> Ok(RequestReferrerPolicyNoReferrer)
    Ok("origin") -> Ok(RequestReferrerPolicyOrigin)
    Ok("origin-when-cross-origin") ->
      Ok(RequestReferrerPolicyOriginWhenCrossOrigin)
    Ok("same-origin") -> Ok(RequestReferrerPolicySameOrigin)
    Ok("strict-origin") -> Ok(RequestReferrerPolicyStrictOrigin)
    Ok("strict-origin-when-cross-origin") ->
      Ok(RequestReferrerPolicyStrictOriginWhenCrossOrigin)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

@internal
pub fn encode__request(value__: Request) {
  json.object([
    #("url", json.string(value__.url)),
    #("urlFragment", {
      case value__.url_fragment {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("method", json.string(value__.method)),
    #("headers", encode__headers(value__.headers)),
    #("hasPostData", {
      case value__.has_post_data {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("mixedContentType", {
      case value__.mixed_content_type {
        option.Some(value__) -> security.encode__mixed_content_type(value__)
        option.None -> json.null()
      }
    }),
    #("initialPriority", encode__resource_priority(value__.initial_priority)),
    #(
      "referrerPolicy",
      encode__request_referrer_policy(value__.referrer_policy),
    ),
    #("isLinkPreload", {
      case value__.is_link_preload {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__request(value__: dynamic.Dynamic) {
  use url <- result.try(dynamic.field("url", dynamic.string)(value__))
  use url_fragment <- result.try(dynamic.optional_field(
    "urlFragment",
    dynamic.string,
  )(value__))
  use method <- result.try(dynamic.field("method", dynamic.string)(value__))
  use headers <- result.try(dynamic.field("headers", decode__headers)(value__))
  use has_post_data <- result.try(dynamic.optional_field(
    "hasPostData",
    dynamic.bool,
  )(value__))
  use mixed_content_type <- result.try(dynamic.optional_field(
    "mixedContentType",
    security.decode__mixed_content_type,
  )(value__))
  use initial_priority <- result.try(dynamic.field(
    "initialPriority",
    decode__resource_priority,
  )(value__))
  use referrer_policy <- result.try(dynamic.field(
    "referrerPolicy",
    decode__request_referrer_policy,
  )(value__))
  use is_link_preload <- result.try(dynamic.optional_field(
    "isLinkPreload",
    dynamic.bool,
  )(value__))

  Ok(Request(
    url: url,
    url_fragment: url_fragment,
    method: method,
    headers: headers,
    has_post_data: has_post_data,
    mixed_content_type: mixed_content_type,
    initial_priority: initial_priority,
    referrer_policy: referrer_policy,
    is_link_preload: is_link_preload,
  ))
}

/// Details of a signed certificate timestamp (SCT).
pub type SignedCertificateTimestamp {
  SignedCertificateTimestamp(
    status: String,
    origin: String,
    log_description: String,
    log_id: String,
    timestamp: Float,
    hash_algorithm: String,
    signature_algorithm: String,
    signature_data: String,
  )
}

@internal
pub fn encode__signed_certificate_timestamp(value__: SignedCertificateTimestamp) {
  json.object([
    #("status", json.string(value__.status)),
    #("origin", json.string(value__.origin)),
    #("logDescription", json.string(value__.log_description)),
    #("logId", json.string(value__.log_id)),
    #("timestamp", json.float(value__.timestamp)),
    #("hashAlgorithm", json.string(value__.hash_algorithm)),
    #("signatureAlgorithm", json.string(value__.signature_algorithm)),
    #("signatureData", json.string(value__.signature_data)),
  ])
}

@internal
pub fn decode__signed_certificate_timestamp(value__: dynamic.Dynamic) {
  use status <- result.try(dynamic.field("status", dynamic.string)(value__))
  use origin <- result.try(dynamic.field("origin", dynamic.string)(value__))
  use log_description <- result.try(dynamic.field(
    "logDescription",
    dynamic.string,
  )(value__))
  use log_id <- result.try(dynamic.field("logId", dynamic.string)(value__))
  use timestamp <- result.try(dynamic.field("timestamp", dynamic.float)(value__))
  use hash_algorithm <- result.try(dynamic.field(
    "hashAlgorithm",
    dynamic.string,
  )(value__))
  use signature_algorithm <- result.try(dynamic.field(
    "signatureAlgorithm",
    dynamic.string,
  )(value__))
  use signature_data <- result.try(dynamic.field(
    "signatureData",
    dynamic.string,
  )(value__))

  Ok(SignedCertificateTimestamp(
    status: status,
    origin: origin,
    log_description: log_description,
    log_id: log_id,
    timestamp: timestamp,
    hash_algorithm: hash_algorithm,
    signature_algorithm: signature_algorithm,
    signature_data: signature_data,
  ))
}

/// Security details about a request.
pub type SecurityDetails {
  SecurityDetails(
    protocol: String,
    key_exchange: String,
    key_exchange_group: option.Option(String),
    cipher: String,
    mac: option.Option(String),
    certificate_id: security.CertificateId,
    subject_name: String,
    san_list: List(String),
    issuer: String,
    valid_from: TimeSinceEpoch,
    valid_to: TimeSinceEpoch,
    signed_certificate_timestamp_list: List(SignedCertificateTimestamp),
    certificate_transparency_compliance: CertificateTransparencyCompliance,
    server_signature_algorithm: option.Option(Int),
    encrypted_client_hello: Bool,
  )
}

@internal
pub fn encode__security_details(value__: SecurityDetails) {
  json.object([
    #("protocol", json.string(value__.protocol)),
    #("keyExchange", json.string(value__.key_exchange)),
    #("keyExchangeGroup", {
      case value__.key_exchange_group {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("cipher", json.string(value__.cipher)),
    #("mac", {
      case value__.mac {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("certificateId", security.encode__certificate_id(value__.certificate_id)),
    #("subjectName", json.string(value__.subject_name)),
    #("sanList", json.array(value__.san_list, of: json.string)),
    #("issuer", json.string(value__.issuer)),
    #("validFrom", encode__time_since_epoch(value__.valid_from)),
    #("validTo", encode__time_since_epoch(value__.valid_to)),
    #(
      "signedCertificateTimestampList",
      json.array(
        value__.signed_certificate_timestamp_list,
        of: encode__signed_certificate_timestamp,
      ),
    ),
    #(
      "certificateTransparencyCompliance",
      encode__certificate_transparency_compliance(
        value__.certificate_transparency_compliance,
      ),
    ),
    #("serverSignatureAlgorithm", {
      case value__.server_signature_algorithm {
        option.Some(value__) -> json.int(value__)
        option.None -> json.null()
      }
    }),
    #("encryptedClientHello", json.bool(value__.encrypted_client_hello)),
  ])
}

@internal
pub fn decode__security_details(value__: dynamic.Dynamic) {
  use protocol <- result.try(dynamic.field("protocol", dynamic.string)(value__))
  use key_exchange <- result.try(dynamic.field("keyExchange", dynamic.string)(
    value__,
  ))
  use key_exchange_group <- result.try(dynamic.optional_field(
    "keyExchangeGroup",
    dynamic.string,
  )(value__))
  use cipher <- result.try(dynamic.field("cipher", dynamic.string)(value__))
  use mac <- result.try(dynamic.optional_field("mac", dynamic.string)(value__))
  use certificate_id <- result.try(dynamic.field(
    "certificateId",
    security.decode__certificate_id,
  )(value__))
  use subject_name <- result.try(dynamic.field("subjectName", dynamic.string)(
    value__,
  ))
  use san_list <- result.try(dynamic.field(
    "sanList",
    dynamic.list(dynamic.string),
  )(value__))
  use issuer <- result.try(dynamic.field("issuer", dynamic.string)(value__))
  use valid_from <- result.try(dynamic.field(
    "validFrom",
    decode__time_since_epoch,
  )(value__))
  use valid_to <- result.try(dynamic.field("validTo", decode__time_since_epoch)(
    value__,
  ))
  use signed_certificate_timestamp_list <- result.try(dynamic.field(
    "signedCertificateTimestampList",
    dynamic.list(decode__signed_certificate_timestamp),
  )(value__))
  use certificate_transparency_compliance <- result.try(dynamic.field(
    "certificateTransparencyCompliance",
    decode__certificate_transparency_compliance,
  )(value__))
  use server_signature_algorithm <- result.try(dynamic.optional_field(
    "serverSignatureAlgorithm",
    dynamic.int,
  )(value__))
  use encrypted_client_hello <- result.try(dynamic.field(
    "encryptedClientHello",
    dynamic.bool,
  )(value__))

  Ok(SecurityDetails(
    protocol: protocol,
    key_exchange: key_exchange,
    key_exchange_group: key_exchange_group,
    cipher: cipher,
    mac: mac,
    certificate_id: certificate_id,
    subject_name: subject_name,
    san_list: san_list,
    issuer: issuer,
    valid_from: valid_from,
    valid_to: valid_to,
    signed_certificate_timestamp_list: signed_certificate_timestamp_list,
    certificate_transparency_compliance: certificate_transparency_compliance,
    server_signature_algorithm: server_signature_algorithm,
    encrypted_client_hello: encrypted_client_hello,
  ))
}

/// Whether the request complied with Certificate Transparency policy.
pub type CertificateTransparencyCompliance {
  CertificateTransparencyComplianceUnknown
  CertificateTransparencyComplianceNotCompliant
  CertificateTransparencyComplianceCompliant
}

@internal
pub fn encode__certificate_transparency_compliance(value__: CertificateTransparencyCompliance) {
  case value__ {
    CertificateTransparencyComplianceUnknown -> "unknown"
    CertificateTransparencyComplianceNotCompliant -> "not-compliant"
    CertificateTransparencyComplianceCompliant -> "compliant"
  }
  |> json.string()
}

@internal
pub fn decode__certificate_transparency_compliance(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("unknown") -> Ok(CertificateTransparencyComplianceUnknown)
    Ok("not-compliant") -> Ok(CertificateTransparencyComplianceNotCompliant)
    Ok("compliant") -> Ok(CertificateTransparencyComplianceCompliant)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// The reason why request was blocked.
pub type BlockedReason {
  BlockedReasonOther
  BlockedReasonCsp
  BlockedReasonMixedContent
  BlockedReasonOrigin
  BlockedReasonInspector
  BlockedReasonSubresourceFilter
  BlockedReasonContentType
  BlockedReasonCoepFrameResourceNeedsCoepHeader
  BlockedReasonCoopSandboxedIframeCannotNavigateToCoopPage
  BlockedReasonCorpNotSameOrigin
  BlockedReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep
  BlockedReasonCorpNotSameSite
}

@internal
pub fn encode__blocked_reason(value__: BlockedReason) {
  case value__ {
    BlockedReasonOther -> "other"
    BlockedReasonCsp -> "csp"
    BlockedReasonMixedContent -> "mixed-content"
    BlockedReasonOrigin -> "origin"
    BlockedReasonInspector -> "inspector"
    BlockedReasonSubresourceFilter -> "subresource-filter"
    BlockedReasonContentType -> "content-type"
    BlockedReasonCoepFrameResourceNeedsCoepHeader ->
      "coep-frame-resource-needs-coep-header"
    BlockedReasonCoopSandboxedIframeCannotNavigateToCoopPage ->
      "coop-sandboxed-iframe-cannot-navigate-to-coop-page"
    BlockedReasonCorpNotSameOrigin -> "corp-not-same-origin"
    BlockedReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep ->
      "corp-not-same-origin-after-defaulted-to-same-origin-by-coep"
    BlockedReasonCorpNotSameSite -> "corp-not-same-site"
  }
  |> json.string()
}

@internal
pub fn decode__blocked_reason(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("other") -> Ok(BlockedReasonOther)
    Ok("csp") -> Ok(BlockedReasonCsp)
    Ok("mixed-content") -> Ok(BlockedReasonMixedContent)
    Ok("origin") -> Ok(BlockedReasonOrigin)
    Ok("inspector") -> Ok(BlockedReasonInspector)
    Ok("subresource-filter") -> Ok(BlockedReasonSubresourceFilter)
    Ok("content-type") -> Ok(BlockedReasonContentType)
    Ok("coep-frame-resource-needs-coep-header") ->
      Ok(BlockedReasonCoepFrameResourceNeedsCoepHeader)
    Ok("coop-sandboxed-iframe-cannot-navigate-to-coop-page") ->
      Ok(BlockedReasonCoopSandboxedIframeCannotNavigateToCoopPage)
    Ok("corp-not-same-origin") -> Ok(BlockedReasonCorpNotSameOrigin)
    Ok("corp-not-same-origin-after-defaulted-to-same-origin-by-coep") ->
      Ok(BlockedReasonCorpNotSameOriginAfterDefaultedToSameOriginByCoep)
    Ok("corp-not-same-site") -> Ok(BlockedReasonCorpNotSameSite)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// The reason why request was blocked.
pub type CorsError {
  CorsErrorDisallowedByMode
  CorsErrorInvalidResponse
  CorsErrorWildcardOriginNotAllowed
  CorsErrorMissingAllowOriginHeader
  CorsErrorMultipleAllowOriginValues
  CorsErrorInvalidAllowOriginValue
  CorsErrorAllowOriginMismatch
  CorsErrorInvalidAllowCredentials
  CorsErrorCorsDisabledScheme
  CorsErrorPreflightInvalidStatus
  CorsErrorPreflightDisallowedRedirect
  CorsErrorPreflightWildcardOriginNotAllowed
  CorsErrorPreflightMissingAllowOriginHeader
  CorsErrorPreflightMultipleAllowOriginValues
  CorsErrorPreflightInvalidAllowOriginValue
  CorsErrorPreflightAllowOriginMismatch
  CorsErrorPreflightInvalidAllowCredentials
  CorsErrorPreflightMissingAllowExternal
  CorsErrorPreflightInvalidAllowExternal
  CorsErrorPreflightMissingAllowPrivateNetwork
  CorsErrorPreflightInvalidAllowPrivateNetwork
  CorsErrorInvalidAllowMethodsPreflightResponse
  CorsErrorInvalidAllowHeadersPreflightResponse
  CorsErrorMethodDisallowedByPreflightResponse
  CorsErrorHeaderDisallowedByPreflightResponse
  CorsErrorRedirectContainsCredentials
  CorsErrorInsecurePrivateNetwork
  CorsErrorInvalidPrivateNetworkAccess
  CorsErrorUnexpectedPrivateNetworkAccess
  CorsErrorNoCorsRedirectModeNotFollow
  CorsErrorPreflightMissingPrivateNetworkAccessId
  CorsErrorPreflightMissingPrivateNetworkAccessName
  CorsErrorPrivateNetworkAccessPermissionUnavailable
  CorsErrorPrivateNetworkAccessPermissionDenied
}

@internal
pub fn encode__cors_error(value__: CorsError) {
  case value__ {
    CorsErrorDisallowedByMode -> "DisallowedByMode"
    CorsErrorInvalidResponse -> "InvalidResponse"
    CorsErrorWildcardOriginNotAllowed -> "WildcardOriginNotAllowed"
    CorsErrorMissingAllowOriginHeader -> "MissingAllowOriginHeader"
    CorsErrorMultipleAllowOriginValues -> "MultipleAllowOriginValues"
    CorsErrorInvalidAllowOriginValue -> "InvalidAllowOriginValue"
    CorsErrorAllowOriginMismatch -> "AllowOriginMismatch"
    CorsErrorInvalidAllowCredentials -> "InvalidAllowCredentials"
    CorsErrorCorsDisabledScheme -> "CorsDisabledScheme"
    CorsErrorPreflightInvalidStatus -> "PreflightInvalidStatus"
    CorsErrorPreflightDisallowedRedirect -> "PreflightDisallowedRedirect"
    CorsErrorPreflightWildcardOriginNotAllowed ->
      "PreflightWildcardOriginNotAllowed"
    CorsErrorPreflightMissingAllowOriginHeader ->
      "PreflightMissingAllowOriginHeader"
    CorsErrorPreflightMultipleAllowOriginValues ->
      "PreflightMultipleAllowOriginValues"
    CorsErrorPreflightInvalidAllowOriginValue ->
      "PreflightInvalidAllowOriginValue"
    CorsErrorPreflightAllowOriginMismatch -> "PreflightAllowOriginMismatch"
    CorsErrorPreflightInvalidAllowCredentials ->
      "PreflightInvalidAllowCredentials"
    CorsErrorPreflightMissingAllowExternal -> "PreflightMissingAllowExternal"
    CorsErrorPreflightInvalidAllowExternal -> "PreflightInvalidAllowExternal"
    CorsErrorPreflightMissingAllowPrivateNetwork ->
      "PreflightMissingAllowPrivateNetwork"
    CorsErrorPreflightInvalidAllowPrivateNetwork ->
      "PreflightInvalidAllowPrivateNetwork"
    CorsErrorInvalidAllowMethodsPreflightResponse ->
      "InvalidAllowMethodsPreflightResponse"
    CorsErrorInvalidAllowHeadersPreflightResponse ->
      "InvalidAllowHeadersPreflightResponse"
    CorsErrorMethodDisallowedByPreflightResponse ->
      "MethodDisallowedByPreflightResponse"
    CorsErrorHeaderDisallowedByPreflightResponse ->
      "HeaderDisallowedByPreflightResponse"
    CorsErrorRedirectContainsCredentials -> "RedirectContainsCredentials"
    CorsErrorInsecurePrivateNetwork -> "InsecurePrivateNetwork"
    CorsErrorInvalidPrivateNetworkAccess -> "InvalidPrivateNetworkAccess"
    CorsErrorUnexpectedPrivateNetworkAccess -> "UnexpectedPrivateNetworkAccess"
    CorsErrorNoCorsRedirectModeNotFollow -> "NoCorsRedirectModeNotFollow"
    CorsErrorPreflightMissingPrivateNetworkAccessId ->
      "PreflightMissingPrivateNetworkAccessId"
    CorsErrorPreflightMissingPrivateNetworkAccessName ->
      "PreflightMissingPrivateNetworkAccessName"
    CorsErrorPrivateNetworkAccessPermissionUnavailable ->
      "PrivateNetworkAccessPermissionUnavailable"
    CorsErrorPrivateNetworkAccessPermissionDenied ->
      "PrivateNetworkAccessPermissionDenied"
  }
  |> json.string()
}

@internal
pub fn decode__cors_error(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("DisallowedByMode") -> Ok(CorsErrorDisallowedByMode)
    Ok("InvalidResponse") -> Ok(CorsErrorInvalidResponse)
    Ok("WildcardOriginNotAllowed") -> Ok(CorsErrorWildcardOriginNotAllowed)
    Ok("MissingAllowOriginHeader") -> Ok(CorsErrorMissingAllowOriginHeader)
    Ok("MultipleAllowOriginValues") -> Ok(CorsErrorMultipleAllowOriginValues)
    Ok("InvalidAllowOriginValue") -> Ok(CorsErrorInvalidAllowOriginValue)
    Ok("AllowOriginMismatch") -> Ok(CorsErrorAllowOriginMismatch)
    Ok("InvalidAllowCredentials") -> Ok(CorsErrorInvalidAllowCredentials)
    Ok("CorsDisabledScheme") -> Ok(CorsErrorCorsDisabledScheme)
    Ok("PreflightInvalidStatus") -> Ok(CorsErrorPreflightInvalidStatus)
    Ok("PreflightDisallowedRedirect") ->
      Ok(CorsErrorPreflightDisallowedRedirect)
    Ok("PreflightWildcardOriginNotAllowed") ->
      Ok(CorsErrorPreflightWildcardOriginNotAllowed)
    Ok("PreflightMissingAllowOriginHeader") ->
      Ok(CorsErrorPreflightMissingAllowOriginHeader)
    Ok("PreflightMultipleAllowOriginValues") ->
      Ok(CorsErrorPreflightMultipleAllowOriginValues)
    Ok("PreflightInvalidAllowOriginValue") ->
      Ok(CorsErrorPreflightInvalidAllowOriginValue)
    Ok("PreflightAllowOriginMismatch") ->
      Ok(CorsErrorPreflightAllowOriginMismatch)
    Ok("PreflightInvalidAllowCredentials") ->
      Ok(CorsErrorPreflightInvalidAllowCredentials)
    Ok("PreflightMissingAllowExternal") ->
      Ok(CorsErrorPreflightMissingAllowExternal)
    Ok("PreflightInvalidAllowExternal") ->
      Ok(CorsErrorPreflightInvalidAllowExternal)
    Ok("PreflightMissingAllowPrivateNetwork") ->
      Ok(CorsErrorPreflightMissingAllowPrivateNetwork)
    Ok("PreflightInvalidAllowPrivateNetwork") ->
      Ok(CorsErrorPreflightInvalidAllowPrivateNetwork)
    Ok("InvalidAllowMethodsPreflightResponse") ->
      Ok(CorsErrorInvalidAllowMethodsPreflightResponse)
    Ok("InvalidAllowHeadersPreflightResponse") ->
      Ok(CorsErrorInvalidAllowHeadersPreflightResponse)
    Ok("MethodDisallowedByPreflightResponse") ->
      Ok(CorsErrorMethodDisallowedByPreflightResponse)
    Ok("HeaderDisallowedByPreflightResponse") ->
      Ok(CorsErrorHeaderDisallowedByPreflightResponse)
    Ok("RedirectContainsCredentials") ->
      Ok(CorsErrorRedirectContainsCredentials)
    Ok("InsecurePrivateNetwork") -> Ok(CorsErrorInsecurePrivateNetwork)
    Ok("InvalidPrivateNetworkAccess") ->
      Ok(CorsErrorInvalidPrivateNetworkAccess)
    Ok("UnexpectedPrivateNetworkAccess") ->
      Ok(CorsErrorUnexpectedPrivateNetworkAccess)
    Ok("NoCorsRedirectModeNotFollow") ->
      Ok(CorsErrorNoCorsRedirectModeNotFollow)
    Ok("PreflightMissingPrivateNetworkAccessId") ->
      Ok(CorsErrorPreflightMissingPrivateNetworkAccessId)
    Ok("PreflightMissingPrivateNetworkAccessName") ->
      Ok(CorsErrorPreflightMissingPrivateNetworkAccessName)
    Ok("PrivateNetworkAccessPermissionUnavailable") ->
      Ok(CorsErrorPrivateNetworkAccessPermissionUnavailable)
    Ok("PrivateNetworkAccessPermissionDenied") ->
      Ok(CorsErrorPrivateNetworkAccessPermissionDenied)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

pub type CorsErrorStatus {
  CorsErrorStatus(cors_error: CorsError, failed_parameter: String)
}

@internal
pub fn encode__cors_error_status(value__: CorsErrorStatus) {
  json.object([
    #("corsError", encode__cors_error(value__.cors_error)),
    #("failedParameter", json.string(value__.failed_parameter)),
  ])
}

@internal
pub fn decode__cors_error_status(value__: dynamic.Dynamic) {
  use cors_error <- result.try(dynamic.field("corsError", decode__cors_error)(
    value__,
  ))
  use failed_parameter <- result.try(dynamic.field(
    "failedParameter",
    dynamic.string,
  )(value__))

  Ok(CorsErrorStatus(cors_error: cors_error, failed_parameter: failed_parameter))
}

/// Source of serviceworker response.
pub type ServiceWorkerResponseSource {
  ServiceWorkerResponseSourceCacheStorage
  ServiceWorkerResponseSourceHttpCache
  ServiceWorkerResponseSourceFallbackCode
  ServiceWorkerResponseSourceNetwork
}

@internal
pub fn encode__service_worker_response_source(value__: ServiceWorkerResponseSource) {
  case value__ {
    ServiceWorkerResponseSourceCacheStorage -> "cache-storage"
    ServiceWorkerResponseSourceHttpCache -> "http-cache"
    ServiceWorkerResponseSourceFallbackCode -> "fallback-code"
    ServiceWorkerResponseSourceNetwork -> "network"
  }
  |> json.string()
}

@internal
pub fn decode__service_worker_response_source(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("cache-storage") -> Ok(ServiceWorkerResponseSourceCacheStorage)
    Ok("http-cache") -> Ok(ServiceWorkerResponseSourceHttpCache)
    Ok("fallback-code") -> Ok(ServiceWorkerResponseSourceFallbackCode)
    Ok("network") -> Ok(ServiceWorkerResponseSourceNetwork)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// Source of service worker router.
pub type ServiceWorkerRouterSource {
  ServiceWorkerRouterSourceNetwork
  ServiceWorkerRouterSourceCache
  ServiceWorkerRouterSourceFetchEvent
  ServiceWorkerRouterSourceRaceNetworkAndFetchHandler
}

@internal
pub fn encode__service_worker_router_source(value__: ServiceWorkerRouterSource) {
  case value__ {
    ServiceWorkerRouterSourceNetwork -> "network"
    ServiceWorkerRouterSourceCache -> "cache"
    ServiceWorkerRouterSourceFetchEvent -> "fetch-event"
    ServiceWorkerRouterSourceRaceNetworkAndFetchHandler ->
      "race-network-and-fetch-handler"
  }
  |> json.string()
}

@internal
pub fn decode__service_worker_router_source(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("network") -> Ok(ServiceWorkerRouterSourceNetwork)
    Ok("cache") -> Ok(ServiceWorkerRouterSourceCache)
    Ok("fetch-event") -> Ok(ServiceWorkerRouterSourceFetchEvent)
    Ok("race-network-and-fetch-handler") ->
      Ok(ServiceWorkerRouterSourceRaceNetworkAndFetchHandler)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

/// HTTP response data.
pub type Response {
  Response(
    url: String,
    status: Int,
    status_text: String,
    headers: Headers,
    mime_type: String,
    charset: String,
    request_headers: option.Option(Headers),
    connection_reused: Bool,
    connection_id: Float,
    remote_ip_address: option.Option(String),
    remote_port: option.Option(Int),
    from_disk_cache: option.Option(Bool),
    from_service_worker: option.Option(Bool),
    from_prefetch_cache: option.Option(Bool),
    from_early_hints: option.Option(Bool),
    encoded_data_length: Float,
    timing: option.Option(ResourceTiming),
    service_worker_response_source: option.Option(ServiceWorkerResponseSource),
    response_time: option.Option(TimeSinceEpoch),
    cache_storage_cache_name: option.Option(String),
    protocol: option.Option(String),
    security_state: security.SecurityState,
    security_details: option.Option(SecurityDetails),
  )
}

@internal
pub fn encode__response(value__: Response) {
  json.object([
    #("url", json.string(value__.url)),
    #("status", json.int(value__.status)),
    #("statusText", json.string(value__.status_text)),
    #("headers", encode__headers(value__.headers)),
    #("mimeType", json.string(value__.mime_type)),
    #("charset", json.string(value__.charset)),
    #("requestHeaders", {
      case value__.request_headers {
        option.Some(value__) -> encode__headers(value__)
        option.None -> json.null()
      }
    }),
    #("connectionReused", json.bool(value__.connection_reused)),
    #("connectionId", json.float(value__.connection_id)),
    #("remoteIPAddress", {
      case value__.remote_ip_address {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("remotePort", {
      case value__.remote_port {
        option.Some(value__) -> json.int(value__)
        option.None -> json.null()
      }
    }),
    #("fromDiskCache", {
      case value__.from_disk_cache {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("fromServiceWorker", {
      case value__.from_service_worker {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("fromPrefetchCache", {
      case value__.from_prefetch_cache {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("fromEarlyHints", {
      case value__.from_early_hints {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("encodedDataLength", json.float(value__.encoded_data_length)),
    #("timing", {
      case value__.timing {
        option.Some(value__) -> encode__resource_timing(value__)
        option.None -> json.null()
      }
    }),
    #("serviceWorkerResponseSource", {
      case value__.service_worker_response_source {
        option.Some(value__) -> encode__service_worker_response_source(value__)
        option.None -> json.null()
      }
    }),
    #("responseTime", {
      case value__.response_time {
        option.Some(value__) -> encode__time_since_epoch(value__)
        option.None -> json.null()
      }
    }),
    #("cacheStorageCacheName", {
      case value__.cache_storage_cache_name {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("protocol", {
      case value__.protocol {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("securityState", security.encode__security_state(value__.security_state)),
    #("securityDetails", {
      case value__.security_details {
        option.Some(value__) -> encode__security_details(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__response(value__: dynamic.Dynamic) {
  use url <- result.try(dynamic.field("url", dynamic.string)(value__))
  use status <- result.try(dynamic.field("status", dynamic.int)(value__))
  use status_text <- result.try(dynamic.field("statusText", dynamic.string)(
    value__,
  ))
  use headers <- result.try(dynamic.field("headers", decode__headers)(value__))
  use mime_type <- result.try(dynamic.field("mimeType", dynamic.string)(value__))
  use charset <- result.try(dynamic.field("charset", dynamic.string)(value__))
  use request_headers <- result.try(dynamic.optional_field(
    "requestHeaders",
    decode__headers,
  )(value__))
  use connection_reused <- result.try(dynamic.field(
    "connectionReused",
    dynamic.bool,
  )(value__))
  use connection_id <- result.try(dynamic.field("connectionId", dynamic.float)(
    value__,
  ))
  use remote_ip_address <- result.try(dynamic.optional_field(
    "remoteIPAddress",
    dynamic.string,
  )(value__))
  use remote_port <- result.try(dynamic.optional_field(
    "remotePort",
    dynamic.int,
  )(value__))
  use from_disk_cache <- result.try(dynamic.optional_field(
    "fromDiskCache",
    dynamic.bool,
  )(value__))
  use from_service_worker <- result.try(dynamic.optional_field(
    "fromServiceWorker",
    dynamic.bool,
  )(value__))
  use from_prefetch_cache <- result.try(dynamic.optional_field(
    "fromPrefetchCache",
    dynamic.bool,
  )(value__))
  use from_early_hints <- result.try(dynamic.optional_field(
    "fromEarlyHints",
    dynamic.bool,
  )(value__))
  use encoded_data_length <- result.try(dynamic.field(
    "encodedDataLength",
    dynamic.float,
  )(value__))
  use timing <- result.try(dynamic.optional_field(
    "timing",
    decode__resource_timing,
  )(value__))
  use service_worker_response_source <- result.try(dynamic.optional_field(
    "serviceWorkerResponseSource",
    decode__service_worker_response_source,
  )(value__))
  use response_time <- result.try(dynamic.optional_field(
    "responseTime",
    decode__time_since_epoch,
  )(value__))
  use cache_storage_cache_name <- result.try(dynamic.optional_field(
    "cacheStorageCacheName",
    dynamic.string,
  )(value__))
  use protocol <- result.try(dynamic.optional_field("protocol", dynamic.string)(
    value__,
  ))
  use security_state <- result.try(dynamic.field(
    "securityState",
    security.decode__security_state,
  )(value__))
  use security_details <- result.try(dynamic.optional_field(
    "securityDetails",
    decode__security_details,
  )(value__))

  Ok(Response(
    url: url,
    status: status,
    status_text: status_text,
    headers: headers,
    mime_type: mime_type,
    charset: charset,
    request_headers: request_headers,
    connection_reused: connection_reused,
    connection_id: connection_id,
    remote_ip_address: remote_ip_address,
    remote_port: remote_port,
    from_disk_cache: from_disk_cache,
    from_service_worker: from_service_worker,
    from_prefetch_cache: from_prefetch_cache,
    from_early_hints: from_early_hints,
    encoded_data_length: encoded_data_length,
    timing: timing,
    service_worker_response_source: service_worker_response_source,
    response_time: response_time,
    cache_storage_cache_name: cache_storage_cache_name,
    protocol: protocol,
    security_state: security_state,
    security_details: security_details,
  ))
}

/// WebSocket request data.
pub type WebSocketRequest {
  WebSocketRequest(headers: Headers)
}

@internal
pub fn encode__web_socket_request(value__: WebSocketRequest) {
  json.object([#("headers", encode__headers(value__.headers))])
}

@internal
pub fn decode__web_socket_request(value__: dynamic.Dynamic) {
  use headers <- result.try(dynamic.field("headers", decode__headers)(value__))

  Ok(WebSocketRequest(headers: headers))
}

/// WebSocket response data.
pub type WebSocketResponse {
  WebSocketResponse(
    status: Int,
    status_text: String,
    headers: Headers,
    headers_text: option.Option(String),
    request_headers: option.Option(Headers),
    request_headers_text: option.Option(String),
  )
}

@internal
pub fn encode__web_socket_response(value__: WebSocketResponse) {
  json.object([
    #("status", json.int(value__.status)),
    #("statusText", json.string(value__.status_text)),
    #("headers", encode__headers(value__.headers)),
    #("headersText", {
      case value__.headers_text {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("requestHeaders", {
      case value__.request_headers {
        option.Some(value__) -> encode__headers(value__)
        option.None -> json.null()
      }
    }),
    #("requestHeadersText", {
      case value__.request_headers_text {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__web_socket_response(value__: dynamic.Dynamic) {
  use status <- result.try(dynamic.field("status", dynamic.int)(value__))
  use status_text <- result.try(dynamic.field("statusText", dynamic.string)(
    value__,
  ))
  use headers <- result.try(dynamic.field("headers", decode__headers)(value__))
  use headers_text <- result.try(dynamic.optional_field(
    "headersText",
    dynamic.string,
  )(value__))
  use request_headers <- result.try(dynamic.optional_field(
    "requestHeaders",
    decode__headers,
  )(value__))
  use request_headers_text <- result.try(dynamic.optional_field(
    "requestHeadersText",
    dynamic.string,
  )(value__))

  Ok(WebSocketResponse(
    status: status,
    status_text: status_text,
    headers: headers,
    headers_text: headers_text,
    request_headers: request_headers,
    request_headers_text: request_headers_text,
  ))
}

/// WebSocket message data. This represents an entire WebSocket message, not just a fragmented frame as the name suggests.
pub type WebSocketFrame {
  WebSocketFrame(opcode: Float, mask: Bool, payload_data: String)
}

@internal
pub fn encode__web_socket_frame(value__: WebSocketFrame) {
  json.object([
    #("opcode", json.float(value__.opcode)),
    #("mask", json.bool(value__.mask)),
    #("payloadData", json.string(value__.payload_data)),
  ])
}

@internal
pub fn decode__web_socket_frame(value__: dynamic.Dynamic) {
  use opcode <- result.try(dynamic.field("opcode", dynamic.float)(value__))
  use mask <- result.try(dynamic.field("mask", dynamic.bool)(value__))
  use payload_data <- result.try(dynamic.field("payloadData", dynamic.string)(
    value__,
  ))

  Ok(WebSocketFrame(opcode: opcode, mask: mask, payload_data: payload_data))
}

/// Information about the cached resource.
pub type CachedResource {
  CachedResource(
    url: String,
    type_: ResourceType,
    response: option.Option(Response),
    body_size: Float,
  )
}

@internal
pub fn encode__cached_resource(value__: CachedResource) {
  json.object([
    #("url", json.string(value__.url)),
    #("type", encode__resource_type(value__.type_)),
    #("response", {
      case value__.response {
        option.Some(value__) -> encode__response(value__)
        option.None -> json.null()
      }
    }),
    #("bodySize", json.float(value__.body_size)),
  ])
}

@internal
pub fn decode__cached_resource(value__: dynamic.Dynamic) {
  use url <- result.try(dynamic.field("url", dynamic.string)(value__))
  use type_ <- result.try(dynamic.field("type", decode__resource_type)(value__))
  use response <- result.try(dynamic.optional_field(
    "response",
    decode__response,
  )(value__))
  use body_size <- result.try(dynamic.field("bodySize", dynamic.float)(value__))

  Ok(CachedResource(
    url: url,
    type_: type_,
    response: response,
    body_size: body_size,
  ))
}

/// Information about the request initiator.
pub type Initiator {
  Initiator(
    type_: InitiatorType,
    stack: option.Option(runtime.StackTrace),
    url: option.Option(String),
    line_number: option.Option(Float),
    column_number: option.Option(Float),
    request_id: option.Option(RequestId),
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `type` of `Initiator`
pub type InitiatorType {
  InitiatorTypeParser
  InitiatorTypeScript
  InitiatorTypePreload
  InitiatorTypeSignedExchange
  InitiatorTypePreflight
  InitiatorTypeOther
}

@internal
pub fn encode__initiator_type(value__: InitiatorType) {
  case value__ {
    InitiatorTypeParser -> "parser"
    InitiatorTypeScript -> "script"
    InitiatorTypePreload -> "preload"
    InitiatorTypeSignedExchange -> "SignedExchange"
    InitiatorTypePreflight -> "preflight"
    InitiatorTypeOther -> "other"
  }
  |> json.string()
}

@internal
pub fn decode__initiator_type(value__: dynamic.Dynamic) {
  case dynamic.string(value__) {
    Ok("parser") -> Ok(InitiatorTypeParser)
    Ok("script") -> Ok(InitiatorTypeScript)
    Ok("preload") -> Ok(InitiatorTypePreload)
    Ok("SignedExchange") -> Ok(InitiatorTypeSignedExchange)
    Ok("preflight") -> Ok(InitiatorTypePreflight)
    Ok("other") -> Ok(InitiatorTypeOther)
    Error(error) -> Error(error)
    Ok(other) ->
      Error([
        dynamic.DecodeError(
          expected: "valid enum property",
          found: other,
          path: ["enum decoder"],
        ),
      ])
  }
}

@internal
pub fn encode__initiator(value__: Initiator) {
  json.object([
    #("type", encode__initiator_type(value__.type_)),
    #("stack", {
      case value__.stack {
        option.Some(value__) -> runtime.encode__stack_trace(value__)
        option.None -> json.null()
      }
    }),
    #("url", {
      case value__.url {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("lineNumber", {
      case value__.line_number {
        option.Some(value__) -> json.float(value__)
        option.None -> json.null()
      }
    }),
    #("columnNumber", {
      case value__.column_number {
        option.Some(value__) -> json.float(value__)
        option.None -> json.null()
      }
    }),
    #("requestId", {
      case value__.request_id {
        option.Some(value__) -> encode__request_id(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__initiator(value__: dynamic.Dynamic) {
  use type_ <- result.try(dynamic.field("type", decode__initiator_type)(value__))
  use stack <- result.try(dynamic.optional_field(
    "stack",
    runtime.decode__stack_trace,
  )(value__))
  use url <- result.try(dynamic.optional_field("url", dynamic.string)(value__))
  use line_number <- result.try(dynamic.optional_field(
    "lineNumber",
    dynamic.float,
  )(value__))
  use column_number <- result.try(dynamic.optional_field(
    "columnNumber",
    dynamic.float,
  )(value__))
  use request_id <- result.try(dynamic.optional_field(
    "requestId",
    decode__request_id,
  )(value__))

  Ok(Initiator(
    type_: type_,
    stack: stack,
    url: url,
    line_number: line_number,
    column_number: column_number,
    request_id: request_id,
  ))
}

/// Cookie object
pub type Cookie {
  Cookie(
    name: String,
    value: String,
    domain: String,
    path: String,
    expires: Float,
    size: Int,
    http_only: Bool,
    secure: Bool,
    session: Bool,
    same_site: option.Option(CookieSameSite),
  )
}

@internal
pub fn encode__cookie(value__: Cookie) {
  json.object([
    #("name", json.string(value__.name)),
    #("value", json.string(value__.value)),
    #("domain", json.string(value__.domain)),
    #("path", json.string(value__.path)),
    #("expires", json.float(value__.expires)),
    #("size", json.int(value__.size)),
    #("httpOnly", json.bool(value__.http_only)),
    #("secure", json.bool(value__.secure)),
    #("session", json.bool(value__.session)),
    #("sameSite", {
      case value__.same_site {
        option.Some(value__) -> encode__cookie_same_site(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__cookie(value__: dynamic.Dynamic) {
  use name <- result.try(dynamic.field("name", dynamic.string)(value__))
  use value <- result.try(dynamic.field("value", dynamic.string)(value__))
  use domain <- result.try(dynamic.field("domain", dynamic.string)(value__))
  use path <- result.try(dynamic.field("path", dynamic.string)(value__))
  use expires <- result.try(dynamic.field("expires", dynamic.float)(value__))
  use size <- result.try(dynamic.field("size", dynamic.int)(value__))
  use http_only <- result.try(dynamic.field("httpOnly", dynamic.bool)(value__))
  use secure <- result.try(dynamic.field("secure", dynamic.bool)(value__))
  use session <- result.try(dynamic.field("session", dynamic.bool)(value__))
  use same_site <- result.try(dynamic.optional_field(
    "sameSite",
    decode__cookie_same_site,
  )(value__))

  Ok(Cookie(
    name: name,
    value: value,
    domain: domain,
    path: path,
    expires: expires,
    size: size,
    http_only: http_only,
    secure: secure,
    session: session,
    same_site: same_site,
  ))
}

/// Cookie parameter object
pub type CookieParam {
  CookieParam(
    name: String,
    value: String,
    url: option.Option(String),
    domain: option.Option(String),
    path: option.Option(String),
    secure: option.Option(Bool),
    http_only: option.Option(Bool),
    same_site: option.Option(CookieSameSite),
    expires: option.Option(TimeSinceEpoch),
  )
}

@internal
pub fn encode__cookie_param(value__: CookieParam) {
  json.object([
    #("name", json.string(value__.name)),
    #("value", json.string(value__.value)),
    #("url", {
      case value__.url {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("domain", {
      case value__.domain {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("path", {
      case value__.path {
        option.Some(value__) -> json.string(value__)
        option.None -> json.null()
      }
    }),
    #("secure", {
      case value__.secure {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("httpOnly", {
      case value__.http_only {
        option.Some(value__) -> json.bool(value__)
        option.None -> json.null()
      }
    }),
    #("sameSite", {
      case value__.same_site {
        option.Some(value__) -> encode__cookie_same_site(value__)
        option.None -> json.null()
      }
    }),
    #("expires", {
      case value__.expires {
        option.Some(value__) -> encode__time_since_epoch(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__cookie_param(value__: dynamic.Dynamic) {
  use name <- result.try(dynamic.field("name", dynamic.string)(value__))
  use value <- result.try(dynamic.field("value", dynamic.string)(value__))
  use url <- result.try(dynamic.optional_field("url", dynamic.string)(value__))
  use domain <- result.try(dynamic.optional_field("domain", dynamic.string)(
    value__,
  ))
  use path <- result.try(dynamic.optional_field("path", dynamic.string)(value__))
  use secure <- result.try(dynamic.optional_field("secure", dynamic.bool)(
    value__,
  ))
  use http_only <- result.try(dynamic.optional_field("httpOnly", dynamic.bool)(
    value__,
  ))
  use same_site <- result.try(dynamic.optional_field(
    "sameSite",
    decode__cookie_same_site,
  )(value__))
  use expires <- result.try(dynamic.optional_field(
    "expires",
    decode__time_since_epoch,
  )(value__))

  Ok(CookieParam(
    name: name,
    value: value,
    url: url,
    domain: domain,
    path: path,
    secure: secure,
    http_only: http_only,
    same_site: same_site,
    expires: expires,
  ))
}

/// This type is not part of the protocol spec, it has been generated dynamically
/// to represent the response to the command `get_cookies`
pub type GetCookiesResponse {
  GetCookiesResponse(cookies: List(Cookie))
}

@internal
pub fn decode__get_cookies_response(value__: dynamic.Dynamic) {
  use cookies <- result.try(dynamic.field(
    "cookies",
    dynamic.list(decode__cookie),
  )(value__))

  Ok(GetCookiesResponse(cookies: cookies))
}

/// This type is not part of the protocol spec, it has been generated dynamically
/// to represent the response to the command `get_response_body`
pub type GetResponseBodyResponse {
  GetResponseBodyResponse(body: String, base64_encoded: Bool)
}

@internal
pub fn decode__get_response_body_response(value__: dynamic.Dynamic) {
  use body <- result.try(dynamic.field("body", dynamic.string)(value__))
  use base64_encoded <- result.try(dynamic.field("base64Encoded", dynamic.bool)(
    value__,
  ))

  Ok(GetResponseBodyResponse(body: body, base64_encoded: base64_encoded))
}

/// This type is not part of the protocol spec, it has been generated dynamically
/// to represent the response to the command `get_request_post_data`
pub type GetRequestPostDataResponse {
  GetRequestPostDataResponse(post_data: String)
}

@internal
pub fn decode__get_request_post_data_response(value__: dynamic.Dynamic) {
  use post_data <- result.try(dynamic.field("postData", dynamic.string)(value__))

  Ok(GetRequestPostDataResponse(post_data: post_data))
}

/// Clears browser cache.
pub fn clear_browser_cache(browser_subject) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.clearBrowserCache",
      option.None,
      10_000,
    )
  Nil
}

/// Clears browser cookies.
pub fn clear_browser_cookies(browser_subject) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.clearBrowserCookies",
      option.None,
      10_000,
    )
  Nil
}

/// Deletes browser cookies with matching name and url or domain/path/partitionKey pair.
pub fn delete_cookies(
  browser_subject,
  name: String,
  url: option.Option(String),
  domain: option.Option(String),
  path: option.Option(String),
  partition_key: option.Option(String),
) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.deleteCookies",
      option.Some(
        json.object([
          #("name", json.string(name)),
          #("url", {
            case url {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("domain", {
            case domain {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("path", {
            case path {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("partitionKey", {
            case partition_key {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
        ]),
      ),
      10_000,
    )
  Nil
}

/// Disables network tracking, prevents network events from being sent to the client.
pub fn disable(browser_subject) {
  let _ = chrome.call(browser_subject, "Network.disable", option.None, 10_000)
  Nil
}

/// Activates emulation of network conditions.
pub fn emulate_network_conditions(
  browser_subject,
  offline: Bool,
  latency: Float,
  download_throughput: Float,
  upload_throughput: Float,
  connection_type: option.Option(ConnectionType),
) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.emulateNetworkConditions",
      option.Some(
        json.object([
          #("offline", json.bool(offline)),
          #("latency", json.float(latency)),
          #("downloadThroughput", json.float(download_throughput)),
          #("uploadThroughput", json.float(upload_throughput)),
          #("connectionType", {
            case connection_type {
              option.Some(value__) -> encode__connection_type(value__)
              option.None -> json.null()
            }
          }),
        ]),
      ),
      10_000,
    )
  Nil
}

/// Enables network tracking, network events will now be delivered to the client.
pub fn enable(browser_subject, max_post_data_size: option.Option(Int)) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.enable",
      option.Some(
        json.object([
          #("maxPostDataSize", {
            case max_post_data_size {
              option.Some(value__) -> json.int(value__)
              option.None -> json.null()
            }
          }),
        ]),
      ),
      10_000,
    )
  Nil
}

/// Returns all browser cookies for the current URL. Depending on the backend support, will return
/// detailed cookie information in the `cookies` field.
pub fn get_cookies(browser_subject, urls: option.Option(List(String))) {
  chrome.call(
    browser_subject,
    "Network.getCookies",
    option.Some(
      json.object([
        #("urls", {
          case urls {
            option.Some(value__) -> json.array(value__, of: json.string)
            option.None -> json.null()
          }
        }),
      ]),
    ),
    10_000,
  )
  |> result.try(fn(result__) {
    decode__get_cookies_response(result__)
    |> result.replace_error(chrome.ProtocolError)
  })
}

/// Returns content served for the given request.
pub fn get_response_body(browser_subject, request_id: RequestId) {
  chrome.call(
    browser_subject,
    "Network.getResponseBody",
    option.Some(json.object([#("requestId", encode__request_id(request_id))])),
    10_000,
  )
  |> result.try(fn(result__) {
    decode__get_response_body_response(result__)
    |> result.replace_error(chrome.ProtocolError)
  })
}

/// Returns post data sent with the request. Returns an error when no data was sent with the request.
pub fn get_request_post_data(browser_subject, request_id: RequestId) {
  chrome.call(
    browser_subject,
    "Network.getRequestPostData",
    option.Some(json.object([#("requestId", encode__request_id(request_id))])),
    10_000,
  )
  |> result.try(fn(result__) {
    decode__get_request_post_data_response(result__)
    |> result.replace_error(chrome.ProtocolError)
  })
}

/// Toggles ignoring of service worker for each request.
pub fn set_bypass_service_worker(browser_subject, bypass: Bool) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setBypassServiceWorker",
      option.Some(json.object([#("bypass", json.bool(bypass))])),
      10_000,
    )
  Nil
}

/// Toggles ignoring cache for each request. If `true`, cache will not be used.
pub fn set_cache_disabled(browser_subject, cache_disabled: Bool) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setCacheDisabled",
      option.Some(json.object([#("cacheDisabled", json.bool(cache_disabled))])),
      10_000,
    )
  Nil
}

/// Sets a cookie with the given cookie data; may overwrite equivalent cookies if they exist.
pub fn set_cookie(
  browser_subject,
  name: String,
  value: String,
  url: option.Option(String),
  domain: option.Option(String),
  path: option.Option(String),
  secure: option.Option(Bool),
  http_only: option.Option(Bool),
  same_site: option.Option(CookieSameSite),
  expires: option.Option(TimeSinceEpoch),
) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setCookie",
      option.Some(
        json.object([
          #("name", json.string(name)),
          #("value", json.string(value)),
          #("url", {
            case url {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("domain", {
            case domain {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("path", {
            case path {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("secure", {
            case secure {
              option.Some(value__) -> json.bool(value__)
              option.None -> json.null()
            }
          }),
          #("httpOnly", {
            case http_only {
              option.Some(value__) -> json.bool(value__)
              option.None -> json.null()
            }
          }),
          #("sameSite", {
            case same_site {
              option.Some(value__) -> encode__cookie_same_site(value__)
              option.None -> json.null()
            }
          }),
          #("expires", {
            case expires {
              option.Some(value__) -> encode__time_since_epoch(value__)
              option.None -> json.null()
            }
          }),
        ]),
      ),
      10_000,
    )
  Nil
}

/// Sets given cookies.
pub fn set_cookies(browser_subject, cookies: List(CookieParam)) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setCookies",
      option.Some(
        json.object([
          #("cookies", json.array(cookies, of: encode__cookie_param)),
        ]),
      ),
      10_000,
    )
  Nil
}

/// Specifies whether to always send extra HTTP headers with the requests from this page.
pub fn set_extra_http_headers(browser_subject, headers: Headers) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setExtraHTTPHeaders",
      option.Some(json.object([#("headers", encode__headers(headers))])),
      10_000,
    )
  Nil
}

/// Allows overriding user agent with the given string.
pub fn set_user_agent_override(
  browser_subject,
  user_agent: String,
  accept_language: option.Option(String),
  platform: option.Option(String),
) {
  let _ =
    chrome.call(
      browser_subject,
      "Network.setUserAgentOverride",
      option.Some(
        json.object([
          #("userAgent", json.string(user_agent)),
          #("acceptLanguage", {
            case accept_language {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
          #("platform", {
            case platform {
              option.Some(value__) -> json.string(value__)
              option.None -> json.null()
            }
          }),
        ]),
      ),
      10_000,
    )
  Nil
}
