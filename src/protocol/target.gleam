//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Target Domain  
////
//// Supports additional targets discovery and allows to attach to them.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Target/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import chrome
import gleam/dynamic
import gleam/json
import gleam/option
import gleam/result

pub type TargetID {
  TargetID(String)
}

@internal
pub fn encode__target_id(value__: TargetID) {
  case value__ {
    TargetID(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__target_id(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(TargetID, dynamic.string)
  |> result.replace_error(chrome.ProtocolError)
}

/// Unique identifier of attached debugging session.
pub type SessionID {
  SessionID(String)
}

@internal
pub fn encode__session_id(value__: SessionID) {
  case value__ {
    SessionID(inner_value__) -> json.string(inner_value__)
  }
}

@internal
pub fn decode__session_id(value__: dynamic.Dynamic) {
  value__
  |> dynamic.decode1(SessionID, dynamic.string)
  |> result.replace_error(chrome.ProtocolError)
}

pub type TargetInfo {
  TargetInfo(
    target_id: TargetID,
    type_: String,
    title: String,
    url: String,
    attached: Bool,
    opener_id: option.Option(TargetID),
  )
}

@internal
pub fn encode__target_info(value__: TargetInfo) {
  json.object([
    #("targetId", encode__target_id(value__.target_id)),
    #("type", json.string(value__.type_)),
    #("title", json.string(value__.title)),
    #("url", json.string(value__.url)),
    #("attached", json.bool(value__.attached)),
    #("openerId", {
      case value__.opener_id {
        option.Some(value__) -> encode__target_id(value__)
        option.None -> json.null()
      }
    }),
  ])
}

@internal
pub fn decode__target_info(value__: dynamic.Dynamic) {
  use target_id <- result.try(
    dynamic.field("targetId", decode__target_id)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )
  use type_ <- result.try(
    dynamic.field("type", dynamic.string)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )
  use title <- result.try(
    dynamic.field("title", dynamic.string)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )
  use url <- result.try(
    dynamic.field("url", dynamic.string)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )
  use attached <- result.try(
    dynamic.field("attached", dynamic.bool)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )
  use opener_id <- result.try(
    dynamic.optional_field("openerId", decode__target_id)(value__)
    |> result.replace_error(chrome.ProtocolError),
  )

  TargetInfo(
    target_id: target_id,
    type_: type_,
    title: title,
    url: url,
    attached: attached,
    opener_id: opener_id,
  )
}
