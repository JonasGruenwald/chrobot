//// > ⚙️  This module was generated from the Chrome DevTools Protocol version **1.3**
//// ## Log Domain  
////
//// Provides access to log entries.  
////
//// [📖   View this domain on the DevTools Protocol API Docs](https://chromedevtools.github.io/devtools-protocol/1-3/Log/)

// ---------------------------------------------------------------------------
// |  !!!!!!   This is an autogenerated file - Do not edit manually  !!!!!!  |
// | Run ` gleam run -m scripts/generate_protocol_bindings.sh` to regenerate.|  
// ---------------------------------------------------------------------------

import chrome
import gleam/dynamic
import gleam/json
import gleam/option
import protocol/network
import protocol/runtime

/// Log entry.
pub type LogEntry {
  LogEntry(
    source: LogEntrySource,
    level: LogEntryLevel,
    text: String,
    category: option.Option(LogEntryCategory),
    timestamp: runtime.Timestamp,
    url: option.Option(String),
    line_number: option.Option(Int),
    stack_trace: option.Option(runtime.StackTrace),
    network_request_id: option.Option(network.RequestId),
    worker_id: option.Option(String),
    args: option.Option(List(runtime.RemoteObject)),
  )
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `source` of `LogEntry`
pub type LogEntrySource {
  LogEntrySourceXml
  LogEntrySourceJavascript
  LogEntrySourceNetwork
  LogEntrySourceStorage
  LogEntrySourceAppcache
  LogEntrySourceRendering
  LogEntrySourceSecurity
  LogEntrySourceDeprecation
  LogEntrySourceWorker
  LogEntrySourceViolation
  LogEntrySourceIntervention
  LogEntrySourceRecommendation
  LogEntrySourceOther
}

@internal
pub fn encode__log_entry_source(value: LogEntrySource) {
  case value {
    LogEntrySourceXml -> "xml"
    LogEntrySourceJavascript -> "javascript"
    LogEntrySourceNetwork -> "network"
    LogEntrySourceStorage -> "storage"
    LogEntrySourceAppcache -> "appcache"
    LogEntrySourceRendering -> "rendering"
    LogEntrySourceSecurity -> "security"
    LogEntrySourceDeprecation -> "deprecation"
    LogEntrySourceWorker -> "worker"
    LogEntrySourceViolation -> "violation"
    LogEntrySourceIntervention -> "intervention"
    LogEntrySourceRecommendation -> "recommendation"
    LogEntrySourceOther -> "other"
  }
  |> json.string()
}

@internal
pub fn decode__log_entry_source(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("xml") -> Ok(LogEntrySourceXml)
    Ok("javascript") -> Ok(LogEntrySourceJavascript)
    Ok("network") -> Ok(LogEntrySourceNetwork)
    Ok("storage") -> Ok(LogEntrySourceStorage)
    Ok("appcache") -> Ok(LogEntrySourceAppcache)
    Ok("rendering") -> Ok(LogEntrySourceRendering)
    Ok("security") -> Ok(LogEntrySourceSecurity)
    Ok("deprecation") -> Ok(LogEntrySourceDeprecation)
    Ok("worker") -> Ok(LogEntrySourceWorker)
    Ok("violation") -> Ok(LogEntrySourceViolation)
    Ok("intervention") -> Ok(LogEntrySourceIntervention)
    Ok("recommendation") -> Ok(LogEntrySourceRecommendation)
    Ok("other") -> Ok(LogEntrySourceOther)
    _ -> Error(chrome.ProtocolError)
  }
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `level` of `LogEntry`
pub type LogEntryLevel {
  LogEntryLevelVerbose
  LogEntryLevelInfo
  LogEntryLevelWarning
  LogEntryLevelError
}

@internal
pub fn encode__log_entry_level(value: LogEntryLevel) {
  case value {
    LogEntryLevelVerbose -> "verbose"
    LogEntryLevelInfo -> "info"
    LogEntryLevelWarning -> "warning"
    LogEntryLevelError -> "error"
  }
  |> json.string()
}

@internal
pub fn decode__log_entry_level(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("verbose") -> Ok(LogEntryLevelVerbose)
    Ok("info") -> Ok(LogEntryLevelInfo)
    Ok("warning") -> Ok(LogEntryLevelWarning)
    Ok("error") -> Ok(LogEntryLevelError)
    _ -> Error(chrome.ProtocolError)
  }
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `category` of `LogEntry`
pub type LogEntryCategory {
  LogEntryCategoryCors
}

@internal
pub fn encode__log_entry_category(value: LogEntryCategory) {
  case value {
    LogEntryCategoryCors -> "cors"
  }
  |> json.string()
}

@internal
pub fn decode__log_entry_category(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("cors") -> Ok(LogEntryCategoryCors)
    _ -> Error(chrome.ProtocolError)
  }
}

// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("source", Some("Log entry source."), None, None, None, EnumType(["xml", "javascript", "network", "storage", "appcache", "rendering", "security", "deprecation", "worker", "violation", "intervention", "recommendation", "other"])), PropertyDefinition("level", Some("Log entry severity."), None, None, None, EnumType(["verbose", "info", "warning", "error"])), PropertyDefinition("text", Some("Logged text."), None, None, None, PrimitiveType("string")), PropertyDefinition("category", None, None, None, Some(True), EnumType(["cors"])), PropertyDefinition("timestamp", Some("Timestamp when this entry was added."), None, None, None, RefType("Runtime.Timestamp")), PropertyDefinition("url", Some("URL of the resource if known."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("lineNumber", Some("Line number in the resource."), None, None, Some(True), PrimitiveType("integer")), PropertyDefinition("stackTrace", Some("JavaScript stack trace."), None, None, Some(True), RefType("Runtime.StackTrace")), PropertyDefinition("networkRequestId", Some("Identifier of the network request associated with this entry."), None, None, Some(True), RefType("Network.RequestId")), PropertyDefinition("workerId", Some("Identifier of the worker associated with this entry."), None, None, Some(True), PrimitiveType("string")), PropertyDefinition("args", Some("Call arguments."), None, None, Some(True), ArrayType(ReferenceItem("Runtime.RemoteObject")))]))
/// Violation configuration setting.
pub type ViolationSetting {
  ViolationSetting(name: ViolationSettingName, threshold: Float)
}

/// This type is not part of the protocol spec, it has been generated dynamically 
/// to represent the possible values of the enum property `name` of `ViolationSetting`
pub type ViolationSettingName {
  ViolationSettingNameLongTask
  ViolationSettingNameLongLayout
  ViolationSettingNameBlockedEvent
  ViolationSettingNameBlockedParser
  ViolationSettingNameDiscouragedApiUse
  ViolationSettingNameHandler
  ViolationSettingNameRecurringHandler
}

@internal
pub fn encode__violation_setting_name(value: ViolationSettingName) {
  case value {
    ViolationSettingNameLongTask -> "longTask"
    ViolationSettingNameLongLayout -> "longLayout"
    ViolationSettingNameBlockedEvent -> "blockedEvent"
    ViolationSettingNameBlockedParser -> "blockedParser"
    ViolationSettingNameDiscouragedApiUse -> "discouragedAPIUse"
    ViolationSettingNameHandler -> "handler"
    ViolationSettingNameRecurringHandler -> "recurringHandler"
  }
  |> json.string()
}

@internal
pub fn decode__violation_setting_name(value: dynamic.Dynamic) {
  case dynamic.string(value) {
    Ok("longTask") -> Ok(ViolationSettingNameLongTask)
    Ok("longLayout") -> Ok(ViolationSettingNameLongLayout)
    Ok("blockedEvent") -> Ok(ViolationSettingNameBlockedEvent)
    Ok("blockedParser") -> Ok(ViolationSettingNameBlockedParser)
    Ok("discouragedAPIUse") -> Ok(ViolationSettingNameDiscouragedApiUse)
    Ok("handler") -> Ok(ViolationSettingNameHandler)
    Ok("recurringHandler") -> Ok(ViolationSettingNameRecurringHandler)
    _ -> Error(chrome.ProtocolError)
  }
}
// TODO: implement type encoder for ObjectType(Some([PropertyDefinition("name", Some("Violation type."), None, None, None, EnumType(["longTask", "longLayout", "blockedEvent", "blockedParser", "discouragedAPIUse", "handler", "recurringHandler"])), PropertyDefinition("threshold", Some("Time threshold to trigger upon."), None, None, None, PrimitiveType("number"))]))
